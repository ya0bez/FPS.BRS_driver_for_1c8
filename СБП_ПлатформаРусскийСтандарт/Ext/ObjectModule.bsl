#Область ОписаниеПеременных

Перем РасширенияВнешнихФайловЛогирования;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ВызовыНаАнглийском

Функция GetInterfaceRevision() Экспорт
	Возврат ПолучитьРевизиюИнтерфейса();
КонецФункции

Функция GetDescription(DriverDescription) Экспорт
	Возврат ПолучитьОписание(DriverDescription);
КонецФункции

Функция GetLastError(ErrorDescription) Экспорт
	Возврат ПолучитьОшибку(ErrorDescription);
КонецФункции

Функция GetParameters(TableParameters) Экспорт
	Возврат ПолучитьПараметры(TableParameters);
КонецФункции

Функция SetParameter(Name, Value) Экспорт
	Возврат УстановитьПараметр(Name, Value);
КонецФункции

Функция Open(DeviceID) Экспорт
	#Если Клиент Тогда
	Возврат Подключить(DeviceID);
	#Иначе
	Возврат Ложь;
	#КонецЕсли
КонецФункции

Функция Close(DeviceID) Экспорт
	Возврат Отключить(DeviceID);
КонецФункции

Функция DeviceTest(Description, DemoModeIsActivated) Экспорт
	Возврат ТестУстройства(Description, DemoModeIsActivated);
КонецФункции

Функция GetAdditionalActions(TableActions) Экспорт
	Возврат ПолучитьДополнительныеДействия(TableActions);
КонецФункции

Функция DoAdditionalAction(Parametrs) Экспорт
	Возврат ВыполнитьДополнительноеДействие(Parametrs);
КонецФункции

Функция PayByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ОплатитьПлатежнойКартой(
		DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция ReturnPaymentByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ВернутьПлатежПоПлатежнойКарте(
		DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция CancelPaymentByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ОтменитьПлатежПоПлатежнойКарте(
		DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция AuthorisationByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ПреавторизацияПоПлатежнойКарте(DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция AuthConfirmationByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ЗавершитьПреавторизациюПоПлатежнойКарте(
		DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция CancelAuthorisationByPaymentCard(
		DeviceID, CardNumber = "", Amount, ReceiptNumber = "", RRNCode = "", AuthorizationCode = "", Slip = "") Экспорт
	
	Возврат ОтменитьПреавторизациюПоПлатежнойКарте(
		DeviceID, CardNumber, Amount, ReceiptNumber, RRNCode, AuthorizationCode, Slip);
КонецФункции

Функция EmergencyReversal(DeviceID) Экспорт
	Возврат АварийнаяОтменаОперации(DeviceID);
КонецФункции

Функция Settlement(DeviceID, Slip) Экспорт
	Возврат ИтогиДняПоКартам(DeviceID, Slip);
КонецФункции

Функция PrintSlipOnTerminal() Экспорт
	Возврат ПечатьКвитанцийНаТерминале();
КонецФункции

#КонецОбласти

#Область ПодключаемоеОборудованиеОбязательныеМетоды

// Возвращает код и описание последней произошедшей ошибки.
// Параметры:
//	ОписаниеОшибки - Строка - [OUT] текст ошибки
//
// Возвращаемое значение:
//	Число - код ошибки
//
Функция ПолучитьОшибку(ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = ОшибкаОписание;
	Возврат ОшибкаКод;
	
КонецФункции

// Возвращает поддерживаемую версия требований для данного типа оборудования
// Возвращаемое значение:
//	Число - версия текущего документа (Версии 2.00 соответствует число 2000.
//		Версии 2.4 соответствует число 2004. Текущей версии 3.3 соответствует число 3003.
//
Функция ПолучитьРевизиюИнтерфейса() Экспорт
	
	КодОперации = 1;
	УстановитьОшибку(КодОперации, Истина);
	
	Возврат 3003;
	
КонецФункции

// Возвращает информацию о драйвере
// Параметры:
//	ОписаниеДрайвераXML - Строка - [OUT] возвращает xml таблицу с описанием драйвера.
//		см https://its.1c.ru/db/metod8dev#content:4829:hdoc:table_driverdescription
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ПолучитьОписание(ОписаниеДрайвераXML) Экспорт
	
	КодОперации = 2;
	УстановитьОшибку(КодОперации, Истина);
	
	ОписаниеДрайвера = Новый Структура;
	ОписаниеДрайвера.Вставить("Name", "Драйвер СБП Банка Русский Стандарт");
	ОписаниеДрайвера.Вставить("Description",
		"Программная компонента для оплаты с помощью Системы Быстрых Платежей банка Русский Стандарт");
	ОписаниеДрайвера.Вставить("EquipmentType", "ЭквайринговыйТерминал");
	ОписаниеДрайвера.Вставить("IntegrationComponent", Ложь);
	ОписаниеДрайвера.Вставить("MainDriverInstalled", Истина);
	ОписаниеДрайвера.Вставить("DriverVersion", ПолучитьВерсиюПрограммы());
	ОписаниеДрайвера.Вставить("IntegrationComponentVersion", ОписаниеДрайвера.DriverVersion);
	ОписаниеДрайвера.Вставить("DownloadURL", "");
	ОписаниеДрайвера.Вставить("LogIsEnabled", Ложь);
	ОписаниеДрайвера.Вставить("LogPath", "");
	
	Попытка
		ОписаниеДрайвераXML = ПолучитьXMLНаОснованииСтруктуры("DriverDescription", ОписаниеДрайвера);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		УстановитьОшибку(КодОперации, Ложь, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает список параметров настройки драйвера и их типы, значения по умолчанию и возможные значения.
// Параметры:
//	ТаблицаПараметров - Строка - [OUT] возвращает xml таблицу с параметрами драйвера.
//		см https://its.1c.ru/db/metod8dev#content:4829:hdoc:table_1
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ПолучитьПараметры(ТаблицаПараметров) Экспорт
	
	КодОперации = 3;
	УстановитьОшибку(КодОперации, Истина);
	
	Попытка
		ТаблицаПараметров = ПолучитьМакет("ПараметрыДрайвера").ПолучитьТекст();
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		УстановитьОшибку(КодОперации, Ложь, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Установка значения параметра по имени
// Параметры:
//	ИмяПараметра - Строка - [IN] имя параметра
//	ЗначениеПараметра - Строка - [IN] значение параметра
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	КодОперации = 4;
	УстановитьОшибку(КодОперации, Истина);
	
	Если НЕ ТипЗнч(ПараметрыДрайвера) = Тип("Структура") Тогда
		ПараметрыДрайвера = Новый Структура;
	КонецЕсли;
	
	СоответствиеПараметров = Новый Соответствие;
	// Параметры процессинга банка
	СоответствиеПараметров.Вставить("SaleCodeType", "ТипОплаты");
	СоответствиеПараметров.Вставить("HostAdress", "ПроцессингСервер");
	СоответствиеПараметров.Вставить("НostPort", "ПроцессингПорт");
	СоответствиеПараметров.Вставить("HostProtocol", "ПроцессингПротокол");
	СоответствиеПараметров.Вставить("RequestMetod", "ПроцессингМетодЗапроса");
	СоответствиеПараметров.Вставить("TimeoutWaitingPayment", "ПроцессингВремяЖизниQRКода");
	СоответствиеПараметров.Вставить("TimeoutWaitingProcessingAnswer", "ПроцессингИнтервалОжиданияОтвета");
	СоответствиеПараметров.Вставить("GetQRCode", "ПроцессингАдресРесурсаЗапросКода");
	СоответствиеПараметров.Вставить("GetQRDStatus", "ПроцессингАдресРесурсаПроверкиСтатусаОперации");
	СоответствиеПараметров.Вставить("QrRefund", "ПроцессингАдресРесурсаВозврата");
	СоответствиеПараметров.Вставить("GetRefundStatus", "ПроцессингАдресРесурсаПроверкиВозврата");
	СоответствиеПараметров.Вставить("QRCIdReservation", "ПроцессингАдресРесурсаГенерацииИдентификаторовКПС");
	СоответствиеПараметров.Вставить("СreateCashQR", "ПроцессингАдресРесурсаСозданияКассовойСсылки");
	СоответствиеПараметров.Вставить("ActivateCashQR", "ПроцессингАдресРесурсаАктивацииКассовойСсылки");
	СоответствиеПараметров.Вставить("GetCashQrStatus", "ПроцессингАдресРесурсаПроверкиСтатусаОплатыПоСсылке");
	СоответствиеПараметров.Вставить("DeactivateCashQR", "ПроцессингАдресРесурсаДеактивацииКассовойСсылки");
	СоответствиеПараметров.Вставить("CashQR", "ПроцессингКассоваяПлатежнаяСсылка");
	// Параметры QR-дисплея
	СоответствиеПараметров.Вставить("COMPort", "ДисплейПорт");
	СоответствиеПараметров.Вставить("IntervalResultDisplay", "ДисплейВремяДемонстрацииРезультата");
	// Параметры безопасности
	СоответствиеПараметров.Вставить("ExeOpenSSL", "БезопасностьOpenSSL");
	// Параметры вывода QR-ссылки
	СоответствиеПараметров.Вставить("QRInputType", "ИсточникВыводаQR"); // 1 - вывод на qr-дисплей, 2 - печать на ККМ
	// Параметры логирования выполняемых операций
	СоответствиеПараметров.Вставить("LogEnable", "ВестиЛогирование");
	СоответствиеПараметров.Вставить("LogPatch", "КаталогЛогирования");
	СоответствиеПараметров.Вставить("LogCount", "КоличествоЛоговХранения");
	
	СоответствующийПараметр = СоответствиеПараметров.Получить(ИмяПараметра);
	Попытка
		ПараметрыДрайвера.Вставить(
			?(НЕ СоответствующийПараметр = Неопределено, СоответствующийПараметр, ИмяПараметра), ЗначениеПараметра);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		УстановитьОшибку(КодОперации, Ложь, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Подключает оборудование с текущими значениями параметров, установленных функцией «УстановитьПараметр».
//
// Параметры:
//	ИДУстройства - Строка - [OUT] идентификатор подключенного экземпляра устройства
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция Подключить(ИДУстройства = Неопределено, ИдентификаторСессииНаследуемый = Неопределено) Экспорт
	
	КодОперации = 5;
	УстановитьОшибку(КодОперации, Истина);
	
	Если НЕ ИдентификаторСессииНаследуемый = Неопределено Тогда
		ИдентификаторСессии = ИдентификаторСессииНаследуемый;
	Иначе
		ИдентификаторСессии = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыДрайвера.Вставить("ВерсияДрайвера", ПолучитьАктуальныеСведенияОПрограмме().Версия);
	
	// Проверяем параметры
	Сервер = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингСервер") Тогда
		Сервер = ПараметрыДрайвера.ПроцессингСервер;
	КонецЕсли;
	Если ПустаяСтрока(Сервер) ИЛИ Сервер = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес сервера процессинга банка");
		Возврат Ложь;
	КонецЕсли;
	
	Порт = 0;
	Если ПараметрыДрайвера.Свойство("ПроцессингПорт") Тогда
		Порт = ПараметрыДрайвера.ПроцессингПорт;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Порт) ИЛИ Порт = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует порт сервера процессинга банка");
		Возврат Ложь;
	КонецЕсли;
	
	ИнтервалОжидания = 0;
	Если ПараметрыДрайвера.Свойство("ПроцессингИнтервалОжиданияОтвета") Тогда
		ИнтервалОжидания = ПараметрыДрайвера.ПроцессингИнтервалОжиданияОтвета;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИнтервалОжидания) ИЛИ ИнтервалОжидания = Неопределено Тогда
		ИнтервалОжидания = 0;
	КонецЕсли;
	
	// Не все настройки хранятся в драйвере и получить их методом "установить параметры" недьзя.
	// Часть параметров берется из настроек ФК, получим и проверим эти данные
	БанкРегистрационныйНомерЮЛ = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_РегистрационныйНомерКлиента", ПараметрыСеанса.ТекущаяФирма.ЮрЛицо, Неопределено);
	Если БанкРегистрационныйНомерЮЛ = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Неопределен регистрационный номер");
		Возврат Ложь;
	КонецЕсли;
	ПараметрыДрайвера.Вставить("БанкРегистрационныйНомерЮЛ", БанкРегистрационныйНомерЮЛ);
	
	БанкРасчетныйСчетЮЛ = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_РасчётныйСчетЮЛ", ПараметрыСеанса.ТекущаяФирма.ЮрЛицо, Неопределено);
	Если БанкРасчетныйСчетЮЛ = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Неопределен расчетный счет ЮЛ");
		Возврат Ложь;
	КонецЕсли;
	ПараметрыДрайвера.Вставить("БанкРасчетныйСчетЮЛ", БанкРасчетныйСчетЮЛ);
	
	БанкИдентификаторТСП = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_ИдентификаторТСП", ПараметрыСеанса.ТекущаяФирма, Неопределено);
	Если БанкИдентификаторТСП = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Неопределен расчетный счет ЮЛ");
		Возврат Ложь;
	КонецЕсли;
	ПараметрыДрайвера.Вставить("БанкИдентификаторТСП", БанкИдентификаторТСП);
	
	СсылкаСертификатЭЦП = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_СертификатЭЦП", ПараметрыСеанса.ТекущаяФирма.ЮрЛицо, Неопределено);
	Если СсылкаСертификатЭЦП = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Ошибка при получение сертификата ЭЦП");
		Возврат Ложь;
	КонецЕсли;
	БанкСертификатЭЦП = ПолучитьИмяВременногоФайла(СсылкаСертификатЭЦП.Расширение);
	Попытка
		АдресВременногоХранилищаСертификатЭЦП =
			ПрисоединенныеФайлыВызовСервера.ПолучитьДвоичныеДанные(СсылкаСертификатЭЦП, Новый УникальныйИдентификатор);
		СертификатЭЦПДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаСертификатЭЦП);
		СертификатЭЦПДвоичныеДанные.Записать(БанкСертификатЭЦП);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		УстановитьОшибку(КодОперации, Ложь, СтрШаблон(
				"Ошибка при получение сертификата ЭЦП. %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Ложь;
	КонецПопытки;
	ПараметрыДрайвера.Вставить("БанкСертификатЭЦП", БанкСертификатЭЦП);
	
	// Получаем и сертификат безопасности и пароль. Создаем защищенное соединение
	СсылкаСертификатАвторизации = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_СертификатАвторизации", ПараметрыСеанса.ТекущаяФирма.Бренд, Неопределено);
	Если СсылкаСертификатАвторизации = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Ошибка при получение сертификата авторизации");
		Возврат Ложь;
	КонецЕсли;
	БанкСертификатАвторизации = ПолучитьИмяВременногоФайла(СсылкаСертификатАвторизации.Расширение);
	Попытка
		АдресВременногоХранилищаСертификатАвторизации =
			ПрисоединенныеФайлыВызовСервера.ПолучитьДвоичныеДанные(СсылкаСертификатАвторизации, Новый УникальныйИдентификатор);
		СертификатАвторизацииДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаСертификатАвторизации);
		СертификатАвторизацииДвоичныеДанные.Записать(БанкСертификатАвторизации);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		УстановитьОшибку(КодОперации, Ложь, СтрШаблон(
				"Ошибка при получение сертификата ЭЦП. %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Ложь;
	КонецПопытки;
	ПараметрыДрайвера.Вставить("БанкСертификатАвторизации", БанкСертификатАвторизации);
	
	БанкПарольСертификатаАвторизации = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_ПарольСертификатаАвторизации", ПараметрыСеанса.ТекущаяФирма.Бренд, Неопределено);
	Если БанкПарольСертификатаАвторизации = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует пароль для сертификата авторизации");
		Возврат Ложь;
	КонецЕсли;
	ПараметрыДрайвера.Вставить("БанкПарольСертификатаАвторизации", БанкПарольСертификатаАвторизации);
	
	ФоновоеОжиданиеОплаты = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_ФоновоеОжиданиеОплаты", ПараметрыСеанса.ТекущаяФирма, Ложь);
	ПараметрыДрайвера.Вставить("ФоновоеОжиданиеОплаты", ФоновоеОжиданиеОплаты);
	
	ПроцессингВремяЖизниQRКода = Неопределено;
	Если НЕ ПараметрыДрайвера.Свойство("ПроцессингВремяЖизниQRКода", ПроцессингВремяЖизниQRКода) Тогда
		ПроцессингВремяЖизниQRКода = 2;
	КонецЕсли;
	ПроцессингВремяЖизниQRКода = ФКНастройки.ПолучитьЗначениеНастройки(
			"СБП_РусскийСтандарт_ВремяЖизниПлатежнойСсылки", ПараметрыСеанса.ТекущаяФирма, ПроцессингВремяЖизниQRКода);
	ПараметрыДрайвера.Вставить("ПроцессингВремяЖизниQRКода", ПроцессингВремяЖизниQRКода);
	
	Если НЕ ПараметрыДрайвера.Свойство("РабочееМесто")
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДрайвера.РабочееМесто) Тогда
		ПараметрыДрайвера.Вставить("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	КонецЕсли;
	
	СертификатКлиентаФайл = Новый СертификатКлиентаФайл(
			ПараметрыДрайвера.БанкСертификатАвторизации, ПараметрыДрайвера.БанкПарольСертификатаАвторизации);
	ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаФайл);
	
	// Создаем HTTP соединение с сервером банка
	РезультатУС = Новый Структура;
	ПараметрыУС = Новый Структура;
	ПараметрыУС.Вставить("Сервер", Сервер);
	ПараметрыУС.Вставить("Порт", Порт);
	ПараметрыУС.Вставить("ИнтервалОжидания", ИнтервалОжидания);
	ПараметрыУС.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединениеOpenSSL);
	УстановитьСоединениеHTTP(РезультатУС, ПараметрыУС);
	Если НЕ РезультатУС.Результат Тогда
		УстановитьОшибку(КодОперации, Ложь, РезультатУС.Комментарий);
		Возврат Ложь;
	КонецЕсли;
	ЭтотОбъект.HTTPСоединение = РезультатУС.HTTPСоединение;
	
	КонтрольАрхиваЛогирования();
	ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования(
			"Подключение оборудования. Параметры системы",
			ПараметрыДрайвера, Истина, Истина);
	ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
	
	ИДУстройства = Новый УникальныйИдентификатор;
	Возврат Истина;
	
КонецФункции

// отключаемся от оборудования
// Параметры:
//	ИДУстройства - Строка - [OUT] идентификатор подключенного экземпляра устройства
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция Отключить(ИДУстройства) Экспорт
	
	КодОперации = 6;
	УстановитьОшибку(КодОперации, Истина);
	
	ПараметрыДрайвера = Неопределено;
	ЭтотОбъект.HTTPСоединение = Неопределено;
	ИДУстройства = Неопределено;
	
	Возврат Истина;
	
КонецФункции

// Выполняет пробное подключение и опрос устройства с текущими значениями параметров,
// установленными функцией «УстановитьПараметр».
//
// Параметры:
//	Описание - Строка - [OUT] Описание результата выполнения теста
//	АктивированДемоРежим - Строка - [OUT] Возвращает описание ограничений демонстрационного режима
//		при его наличии и пустой результат при его отсутствии.
//		Пример: драйвер является платным, и для полноценной работы нужен ключ защиты
//
// Возвращаемое значение:
//	Булево - успешно или нет
Функция ТестУстройства(Описание, АктивированДемоРежим, Тестирование = Ложь) Экспорт
	
	КодОперации = 7;
	УстановитьОшибку(КодОперации, Истина);
	
	#Если Клиент Тогда
	ОчиститьСообщения();
	#КонецЕсли
	
	// Пробуем подключиться, выпонить инициализацию параметров
	#Если Клиент Тогда
	ЭтотОбъект.HTTPСоединение = Неопределено;
	Если НЕ Подключить(Неопределено) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Не удалось выполнить подключение");
		Описание = ОшибкаОписание;
		Возврат Ложь;
	КонецЕсли;
	#Иначе
	УстановитьОшибку(КодОперации, Ложь, "");
	Описание = ОшибкаОписание;
	Возврат Ложь;
	#КонецЕсли
	
	// //////////////////// Тестирование возможности шифровать данные
	// Получаем путь к исполняемому файлу OpenSSL
	OpenSSL = "";
	Если ПараметрыДрайвера.Свойство("БезопасностьOpenSSL") Тогда
		OpenSSL = ПараметрыДрайвера.БезопасностьOpenSSL;
	КонецЕсли;
	Если ПустаяСтрока(OpenSSL) ИЛИ OpenSSL = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует путь к исполняемому файлу OpenSSL");
		Описание = ОшибкаОписание;
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем путь к файлу сертификата ЭЦП
	БанкСертификатЭЦП = "";
	Если ПараметрыДрайвера.Свойство("БанкСертификатЭЦП") Тогда
		БанкСертификатЭЦП = ПараметрыДрайвера.БанкСертификатЭЦП;
	КонецЕсли;
	Если ПустаяСтрока(БанкСертификатЭЦП) ИЛИ БанкСертификатЭЦП = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует файл сертификата ЭЦП");
		Описание = ОшибкаОписание;
		Возврат Ложь;
	КонецЕсли;
	
	// Шифруем тестовые данные
	РезультатШБД = Новый Структура;
	ПараметрыШБД = Новый Структура("ДанныеШифрования, OpenSSL, КлючШифрования",
			"Тестовая строка для проверки шифрования", OpenSSL, БанкСертификатЭЦП);
	ШифроватьБлокДанных(РезультатШБД, ПараметрыШБД);
	Если НЕ РезультатШБД.Результат Тогда
		УстановитьОшибку(КодОперации, Ложь, РезультатШБД.Комментарий);
		Описание = ОшибкаОписание;
		Возврат Ложь;
	КонецЕсли;
	ТелоЗапроса = РезультатШБД.ДанныеХэш64;
	#Если Клиент Тогда
	ОбщегоНазначения.СообщитьПользователю("ОК. Тест шифрования данных успешно выполнен");
	#КонецЕсли
	///////////////////////////////////////////////////////////////////
	
	// //////////////////// Тестирование возможности проведения операций с процессингом банка///////////
	// Выполняем тестовый запрос
	АдресРесурса = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаЗапросКода") Тогда
		АдресРесурса = ПараметрыДрайвера.ПроцессингАдресРесурсаЗапросКода;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурса) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес ресурса запроса QR-кода");
		Описание = ОшибкаОписание;
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВЗ = Новый Структура;
	ПараметрыВЗ = Новый Структура;
	ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
	ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
	ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурса);
	ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
	ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	ПараметрыВЗ.Заголовки.Вставить("x-User-Login", ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ);
	ПараметрыВЗ.Вставить("ТелоЗапроса", ТелоЗапроса);
	ПараметрыВЗ.Вставить("ТипКоманды", "POST");
	ПопытокЗапроса = 0;
	КоличествоПопытокЗапроса = 3;
	Пока Истина Цикл
		ПопытокЗапроса = ПопытокЗапроса + 1;
		Если ПопытокЗапроса > КоличествоПопытокЗапроса Тогда
			Возврат Ложь;
		КонецЕсли;
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Тестирование драйвера", ПараметрыВЗ, РезультатВЗ);
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатВЗ.Комментарий);
			Описание = ОшибкаОписание;
			Пауза(3);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	ОбщегоНазначения.СообщитьПользователю(
		"ОК. Тест подключения и обмена данными с процессингом банка успешно выполнен");
	#КонецЕсли
	///////////////////////////////////////////////////////////////////
	
	// //////////////////// Тестирование возможности выводить информацию на QR-Display или печати на ККМ
	Если ПараметрыДрайвера.ИсточникВыводаQR = 1 Тогда
		// Вывод на QR-дисплей
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(
				ПараметрыДрайвера.ДисплейПорт, "QR", "Тестовая строка для проверки QR-дисплея");
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Вывод информациии на QR-дисплей", ПараметрыВД, РезультатВД));
		Если НЕ РезультатВД.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатВД.Комментарий);
			Описание = ОшибкаОписание;
			Возврат Ложь;
		КонецЕсли;
		#Если Клиент Тогда
		Если Вопрос("На QR-дисплее отобразился тестировочный QR-код?",
				РежимДиалогаВопрос.ДаНет, , , "Тест QR-дисплея") = КодВозвратаДиалога.Нет Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка вывода данных на QR-дисплей");
			Описание = ОшибкаОписание;
			Возврат Ложь;
		Иначе
			#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю("ОК. Тест QR-дисплея успешно выполнен");
			#КонецЕсли
			ПараметрыВД = КонструкторПараметровВыводНаДисплей(
					ПараметрыДрайвера.ДисплейПорт, Неопределено, Неопределено, ПараметрыДрайвера.ДисплейВремяДемонстрацииРезультата);
			РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
			ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выключение QR-дисплея", ПараметрыВД, РезультатВД));
		КонецЕсли;
		#КонецЕсли
	ИначеЕсли ПараметрыДрайвера.ИсточникВыводаQR = 2 Тогда
		// Печать QR на ККМ
		РезультатПККМ = Новый Структура;
		ПодключениеККМ(РезультатПККМ);
		Если НЕ РезультатПККМ.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка подключения ККМ");
			Описание = ОшибкаОписание;
			Возврат Ложь;
		КонецЕсли;
		ККМ = РезультатПККМ.ККМ;
		// Напечатаем тестовый QR на ККМ
		ПараметрыПК = КонструкторПараметровПечатиНаККМ(
				ККМ, "Тестовая печать QR на ККМ", "Тестовая печать QR на ККМ");
		РезультатПК = QRПечатьНаККМ(ПараметрыПК);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выполнение печати данных на ККМ", ПараметрыПК, РезультатПК));
		Если НЕ РезультатПК.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка печати QR на ККМ");
			Описание = ОшибкаОписание;
			Попытка
				ККМ.ОтключитьОбъектККМ();
			Исключение
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			Возврат Ложь;
		КонецЕсли;
		#Если Клиент Тогда
		Если Вопрос("На ККМ был распечатан QR-код?",
				РежимДиалогаВопрос.ДаНет, , , "Тест QR-дисплея") = КодВозвратаДиалога.Нет Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка вывода данных на ККМ");
			Описание = ОшибкаОписание;
			Попытка
				ККМ.ОтключитьОбъектККМ();
			Исключение
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			Возврат Ложь;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("ОК. Тест выводв QR-кода на ККМ успешно выполнен");
		КонецЕсли;
		#КонецЕсли
		Попытка
			ККМ.ОтключитьОбъектККМ();
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	ИначеЕсли ПараметрыДрайвера.ИсточникВыводаQR = 3 Тогда
		// Без использования устройства вывода
		#Если Клиент Тогда
		ОбщегоНазначения.СообщитьПользователю("ОК. В параметрах отключен источник вывода графического кода");
		#КонецЕсли
	Иначе
		#Если Клиент Тогда
		ОбщегоНазначения.СообщитьПользователю("Ошибка. Значение параметра для источника вывода QR отличается от ожидаемого");
		#КонецЕсли
	КонецЕсли;
	///////////////////////////////////////////////////////////////////
	
	Возврат Истина;
	
КонецФункции

// Получает список действий, которые будут отображаться как дополнительные пункты меню в форме настройки оборудования,
// доступной администратору. Если действий не предусмотрено, возвращает пустую строку.
// Параметры:
//	ТаблицаДействий - Строка - [OUT] возвращает xml таблицу с параметрами драйвера.
//		см https://its.1c.ru/db/metod8dev#content:4829:hdoc:table_1_4
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ПолучитьДополнительныеДействия(ТаблицаДействий) Экспорт
	
	КодОперации = 8;
	УстановитьОшибку(КодОперации, Истина);
	
	ТаблицаДействий = ЭтотОбъект.ПолучитьМакет("ДополнительныеДействия").ПолучитьТекст();
	Возврат Истина;
	
КонецФункции

// Команда на выполнение дополнительного действия с определенными именем
// Параметры:
//	Параметры - Строка - [IN] Имя действия
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ВыполнитьДополнительноеДействие(Параметры) Экспорт
	
	КодОперации = 9;
	УстановитьОшибку(КодОперации, Истина);
	
	ИмяДействия = "";
	ПараметрыДействия = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		Если НЕ ПустаяСтрока(Параметры) Тогда
			ИмяДействия = Параметры;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры.Свойство("ИмяДействия", ИмяДействия);
		Параметры.Свойство("ПараметрыДействия", ПараметрыДействия);
	Иначе
		УстановитьОшибку(
			КодОперации, Ложь, "Ошибка при выполнение дополнительного действия. Тип параметра отличается от ожидаемого");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяДействия) Тогда
		УстановитьОшибку(
			КодОперации, Ложь, "Ошибка при выполнение дополнительного действия. Отсутсвует имя действия");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрСравнить(ИмяДействия, "СreateCashQR") = 0 Тогда
		// Создание кассовой платежной ссылки
		ВывестиРезультатНаФорму = Неопределено;
		ОповещениеРезультат = Неопределено;
		ИдентификаторКПС = Неопределено;
		ЗапрашиватьВводИдентификатораКПС = Неопределено;
		Если ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
			ПараметрыДействия.Свойство("ИдентификаторКПС", ИдентификаторКПС);
			ПараметрыДействия.Свойство("ОповещениеРезультат", ОповещениеРезультат);
			ПараметрыДействия.Свойство("ВывестиРезультатНаФорму", ВывестиРезультатНаФорму);
			ПараметрыДействия.Свойство("ЗапрашиватьВводИдентификатораКПС", ЗапрашиватьВводИдентификатораКПС);
		КонецЕсли;
		#Если Клиент Тогда
		Если ЗапрашиватьВводИдентификатораКПС = Неопределено
			ИЛИ ЗапрашиватьВводИдентификатораКПС Тогда
			Если НЕ ВвестиСтроку(ИдентификаторКПС, "Введите идентификатор КПС", 100, Ложь) Тогда
				УстановитьОшибку(
					КодОперации, Ложь, СтрШаблон("Действие %1: отсутсвует идентификатор КПС.", Строка(ИмяДействия)));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		Если НЕ ТипЗнч(ВывестиРезультатНаФорму) = Тип("Булево") Тогда
			ВывестиРезультатНаФорму = Истина;
		КонецЕсли;
		РезультатСКС = Новый Структура;
		СоздатьКассовуюПлатежнуюСсылку(РезультатСКС,
			Новый Структура("ИдентификаторКПС, ВывестиРезультатНаФорму", ИдентификаторКПС, ВывестиРезультатНаФорму));
		Если ТипЗнч(ОповещениеРезультат) = Тип("ОписаниеОповещения") Тогда
			#Если Клиент Тогда
			ВыполнитьОбработкуОповещения(ОповещениеРезультат, РезультатСКС);
			#КонецЕсли
		КонецЕсли;
		Если НЕ РезультатСКС.Результат Тогда
			#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатСКС.Комментарий);
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, СтрШаблон("Действие %1: %2", Строка(ИмяДействия), РезультатСКС.Комментарий));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтрСравнить(ИмяДействия, "QRCIdReservation") = 0 Тогда
		// Генерация идентификаторов кассовых платежных ссылок (для последующей их регистрации как КПС)
		КоличествоИдентификаторовКПС = Неопределено;
		Если ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
			ПараметрыДействия.Свойство("КоличествоИдентификаторовКПС", КоличествоИдентификаторовКПС);
		КонецЕсли;
		Если НЕ ТипЗнч(КоличествоИдентификаторовКПС) = Тип("Число")
			ИЛИ КоличествоИдентификаторовКПС < 1 Тогда
			КоличествоИдентификаторовКПС = 1;
		КонецЕсли;
		#Если Клиент Тогда
		Если НЕ ВвестиЧисло(КоличествоИдентификаторовКПС,
				"Введите количество генерируемых идентификаторов(целое число)", 0, 0) Тогда
			УстановитьОшибку(КодОперации, Ложь, СтрШаблон("Действие %1: количество не введено.", Строка(ИмяДействия)));
			Возврат Ложь;
		КонецЕсли;
		#КонецЕсли
		КоличествоИдентификаторовКПС = Окр(КоличествоИдентификаторовКПС, 0, РежимОкругления.Окр15как20);
		Если КоличествоИдентификаторовКПС < 1 Тогда
			УстановитьОшибку(КодОперации, Ложь,
				СтрШаблон("Ошибка при выполнение дополнительного действия. Действие %1: введено не правильное количество.",
					Строка(ИмяДействия)));
			Возврат Ложь;
		КонецЕсли;
		РезультатПИКПС = Новый Структура;
		ПолучитьИдентификаторыКассовыхПлатежныхСсылок(
			РезультатПИКПС, Новый Структура("КоличествоИдентификаторовКПС", КоличествоИдентификаторовКПС));
		Если НЕ РезультатПИКПС.Результат Тогда
			#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатПИКПС.Комментарий);
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь,
				СтрШаблон("Ошибка при выполнение дополнительного действия. Действие  %1: %2",
					Строка(ИмяДействия), РезультатПИКПС.Комментарий));
			Возврат Ложь;
		КонецЕсли;
		РезультатПИК = Новый Структура;
		JSONПреобразоватьИзКоллекции(РезультатПИК,
			Новый Структура("КоллекцияПреобразования", РезультатПИКПС.КоллекцияДанныхКПС));
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатПИК.Комментарий);
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь,
				СтрШаблон("Ошибка при выполнение дополнительного действия. Действие %1: %2",
					Строка(ИмяДействия), РезультатПИК.Комментарий));
			Возврат Ложь;
		КонецЕсли;
		ДанныеИдентификаторовКПСТекст = Новый ТекстовыйДокумент();
		ДанныеИдентификаторовКПСТекст.УстановитьТекст(РезультатПИК.JsonТекст);
		ДанныеИдентификаторовКПСТекст.Показать("Сгенерированные данные. Идентификаторы КПС");
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				"Ошибка при выполнение дополнительного действия. Действие %1 не определено", Строка(ИмяДействия)));
		#КонецЕсли
		УстановитьОшибку(КодОперации, Ложь,
			СтрШаблон("Ошибка при выполнение дополнительного действия. Действие %1 не определено", Строка(ИмяДействия)));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЭквайринговыйТерминалОбязательныеМетоды

// Метод осуществляет авторизацию оплаты по карте
// При необходимости оплатить покупку платежной картой Система вызывает метод
// "ОплатитьПлатежнойКартой (PayByPaymentCard)",
// передавая во входном параметре сумму к оплате для списания с карты и номер считанной карты.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// Драйвер в ответ возвращает результат выполнения функции, код RRN, код авторизации и текст слип-чека.
// Текст слип-чека может быть самостоятельно распечатан терминалом на встроенном принтере или распечатан
// на ФР (определяется методом ПечатьКвитанцийНаТерминале).
// После выполнения функции в параметре номера считанной карты возвращается
// номер прочитанной на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты. Если информация, считанная с карты,
//		передается в эквайринговую систему из конфигурации "1С:Предприятия",
//		содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [OUT] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
//		Если при печати необходимо формировать несколько отдельных документов,
//		в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
//		Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//	Тестирование - Булево - Значение по умолчанию "Ложь". В данной реализации параметр не применяется
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ОплатитьПлатежнойКартой(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "", Тестирование = Ложь) Экспорт
	
	КодОперации = 19;
	УстановитьОшибку(КодОперации, Истина);
	
	Попытка
		АдресФайлаРезультатаОплаты = ПолучитьИмяВременногоФайлаЛогаРезультатаОплаты();
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ОписаниеОшибки());
		ВыполнитьЗаписьЛогаПриОшибки(ОписаниеОшибки());
	КонецПопытки;

	// Определяем каким методом будем производить оплату
	// запускаем тот или иной сценарий в заисимости от параметра драйвера
	Если ПараметрыДрайвера.ТипОплаты = 1 Тогда // Оплата динамическим QR-кодом
		РезультатОДК = ОплатитьДинамическимКодом(Новый Структура("Сумма", Сумма));
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Результат проведения оплаты динамической платежной ссылкой СБП",
				Новый Структура("Сумма", Сумма),
				ПолучитьКопиюСтруктурыПоВключаемымКлючам(РезультатОДК, "Результат"));
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
		Если НЕ РезультатОДК.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатОДК.Комментарий);
			Возврат Ложь;
		КонецЕсли;
		Результат = РезультатОДК;
	ИначеЕсли ПараметрыДрайвера.ТипОплаты = 2 Тогда // Оплата кассовой платежной ссылкой
		РезультатОКС = ОплатитьКассовойПлатежнойСсылкой(Новый Структура("Сумма", Сумма));
		Если РезультатОКС.ПлатежнаяСсылкаАктивна Тогда
			ДеактивацияКассовойПлатежнойСсылки();
		КонецЕсли;
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Результат проведения оплаты кассовой(статической) платежной ссылкой СБП",
				Новый Структура("Сумма", Сумма),
				ПолучитьКопиюСтруктурыПоВключаемымКлючам(РезультатОКС, "Результат,ПлатежнаяСсылкаАктивна"));
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
		Если НЕ РезультатОКС.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатОКС.Комментарий);
			Возврат Ложь;
		КонецЕсли;
		Результат = РезультатОКС;
	Иначе
		УстановитьОшибку(КодОперации, Ложь,
			СтрШаблон("Неизвестный метод оплаты СБП (%1)", Строка(ПараметрыДрайвера.ТипОплаты)));
		Возврат Ложь;
	КонецЕсли;
	
	КодАвторизации = Результат.КодАвторизации;
	ТекстКвитанции = Результат.ТекстКвитанции;
	КодRRN = Результат.КодRRN;
	НомерЧека = Результат.НомерЧека;
	Возврат Истина;
	
КонецФункции

// Метод осуществляет возврат платежа по карте
// При возврате платежа Система вызывает метод "ВернутьПлатежПоПлатежнойКарте (ReturnPaymentByPaymentCard)",
// передавая во входном параметре сумму к возврату на карту, номер считанной карты, код RRN операции,
// по которой совершается возврат, и код авторизации.
// Драйвер в ответ возвращает результат выполнения функции, а в выходные параметры записывает код RRN, код авторизации.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// После выполнения функции в параметре номера считанной карты возвращается номер прочитанной
// на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты. Если информация, считанная с карты,
//		передается в эквайринговую систему из конфигурации "1С:Предприятия",
//		содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [IN] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
//		Если при печати необходимо формировать несколько отдельных документов,
//		в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
//		Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//	Тестирование - Булево - Значение по умолчанию "Ложь". В данной реализации параметр не применяется
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ВернутьПлатежПоПлатежнойКарте(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "", Тестирование = Ложь) Экспорт
	
	КодОперации = 20;
	УстановитьОшибку(КодОперации, Истина);
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка соединения с процессингом банка");
			Возврат Ложь;
		КонецЕсли;
		#Иначе
		УстановитьОшибку(КодОперации, Ложь, "");
		Возврат Ложь;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	ИдентификаторыВозврата = КодRRN;
	Если ПустаяСтрока(ИдентификаторыВозврата) Тогда
		УстановитьОшибку(КодОперации, Ложь,
			"Отсутствуют идентификаторы операции оплаты, на основание которых проводится возврат");
		Возврат Ложь;
	КонецЕсли;
	ИдентификаторыВозврата = СтрРазделить(КодRRN, ":", Истина);
	// используется как "originalld" для статики и динамики или "activationSourceld" для статики.
	ИдентификаторОперацииОплатыОснования = ИдентификаторыВозврата.Получить(0);
	// "fpsRequestld" Уникальный идентификатор операции ОПКЦ СБП,
	// обязателен для статических QR кодов для одного из вариантов перегрузки метода возврат.
	ИдентификаторОперацииСБП = "";
	Если ИдентификаторыВозврата.Количество() > 1 Тогда
		ИдентификаторОперацииСБП = ИдентификаторыВозврата.Получить(1);
	КонецЕсли;
	ВариантМетодаВозврата = "ПоИдентификаторуФормированияСсылки";
	Если НЕ ИдентификаторыВозврата.Найти("ПоИдентификаторуАктивацииКПС") = Неопределено Тогда
		ВариантМетодаВозврата = "ПоИдентификаторуАктивацииКПС";
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует регистрационный номер ЮЛ (UserLogin)");
		Возврат Ложь;
	КонецЕсли;
	
	АдресРесурсаЗапросаВозврата = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаВозврата") Тогда
		АдресРесурсаЗапросаВозврата = ПараметрыДрайвера.ПроцессингАдресРесурсаВозврата;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаЗапросаВозврата) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес ресурса запроса возврата");
		Возврат Ложь;
	КонецЕсли;
	
	АдресРесурсаЗапросаПроверкиВозврата = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаПроверкиВозврата") Тогда
		АдресРесурсаЗапросаПроверкиВозврата = ПараметрыДрайвера.ПроцессингАдресРесурсаПроверкиВозврата;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаЗапросаПроверкиВозврата) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес ресурса запроса проверки статуса возврата");
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует идентификатор ТСП (merchantid)");
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем путь к исполняемому файлу OpenSSL
	OpenSSL = "";
	Если ПараметрыДрайвера.Свойство("БезопасностьOpenSSL") Тогда
		OpenSSL = ПараметрыДрайвера.БезопасностьOpenSSL;
	КонецЕсли;
	Если ПустаяСтрока(OpenSSL) ИЛИ OpenSSL = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует путь к исполняемому файлу OpenSSL");
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем ключ шифрования
	БанкСертификатЭЦП = "";
	Если ПараметрыДрайвера.Свойство("БанкСертификатЭЦП") Тогда
		БанкСертификатЭЦП = ПараметрыДрайвера.БанкСертификатЭЦП;
	КонецЕсли;
	Если ПустаяСтрока(БанкСертификатЭЦП) ИЛИ БанкСертификатЭЦП = Неопределено Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует файл сертификата ЭЦП");
		Возврат Ложь;
	КонецЕсли;
	
	// Подготавливаем данные и открываем форму возврата
	ПараметрыОжиданияВозврата = Новый Структура;
	ПараметрыОжиданияВозврата.Вставить("ВариантМетодаВозврата", ВариантМетодаВозврата);
	ПараметрыОжиданияВозврата.Вставить("ИдентификаторОперацииОплатыОснования", ИдентификаторОперацииОплатыОснования);
	ПараметрыОжиданияВозврата.Вставить("ИдентификаторОперацииСБП", ИдентификаторОперацииСБП);
	ПараметрыОжиданияВозврата.Вставить("РегистрационныйНомерЮЛ", РегистрационныйНомерЮЛ);
	ПараметрыОжиданияВозврата.Вставить("АдресРесурсаЗапросаВозврата", АдресРесурсаЗапросаВозврата);
	ПараметрыОжиданияВозврата.Вставить("АдресРесурсаЗапросаПроверкиВозврата", АдресРесурсаЗапросаПроверкиВозврата);
	ПараметрыОжиданияВозврата.Вставить("ИдентификаторТСП", ИдентификаторТСП);
	ПараметрыОжиданияВозврата.Вставить("КлючШифрованияДанных", БанкСертификатЭЦП);
	ПараметрыОжиданияВозврата.Вставить("OpenSSL", OpenSSL);
	ПараметрыОжиданияВозврата.Вставить("Сумма", Сумма);
	ПараметрыОжиданияВозврата.Вставить("ВалютаОперации", "RUB");
	
	ФормаОжиданиеВозврата = ЭтотОбъект.ПолучитьФорму("Возврат"); // BSLLS:GetFormMethod-off
	#Если Клиент Тогда
	ФормаОжиданиеВозврата.ОповещениеВозврат =
		Новый ОписаниеОповещения("ОповещениеВыполнитьВозврат", ЭтотОбъект, ПараметрыОжиданияВозврата);
	#КонецЕсли
	ФормаОжиданиеВозврата.ЭлементыФормы.СуммаВозврата.Заголовок =
		СтрШаблон("Сумма: %1 RUB", Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
	РезультатОжиданиеВозврата = ФормаОжиданиеВозврата.ОткрытьМодально();
	
	КодАвторизации = "";
	ТекстКвитанции = "";
	КодRRN = "";
	Если ТипЗнч(РезультатОжиданиеВозврата.ОтветБанка) = Тип("Структура") Тогда
		Если РезультатОжиданиеВозврата.ОтветБанка.Свойство("sourceId") Тогда
			КодRRN = РезультатОжиданиеВозврата.ОтветБанка.sourceId;
		КонецЕсли;
		Если РезультатОжиданиеВозврата.ОтветБанка.Свойство("paymentData")
			И РезультатОжиданиеВозврата.ОтветБанка.paymentData.Свойство("documentId") Тогда
			КодАвторизации = РезультатОжиданиеВозврата.ОтветБанка.paymentData.documentId;
			НомерЧека = РезультатОжиданиеВозврата.ОтветБанка.paymentData.documentId;
		КонецЕсли;
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", РезультатОжиданиеВозврата.ОтветБанка);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если РезультатПИК.Результат Тогда
			ТекстКвитанции = РезультатПИК.JsonТекст;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РезультатОжиданиеВозврата.Результат Тогда
		УстановитьОшибку(КодОперации, Ложь, РезультатОжиданиеВозврата.Комментарий);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Метод осуществляет отмену платежа по карте
// Если происходит отмена платежа, то Система вызывает метод
// "ОтменитьПлатежПоПлатежнойКарте (CancelPaymentByPaymentCard)",
// передавая во входных параметрах сумму, которая была указана для списания с карты,
// номер считанной карты, код RRN операции, по которой совершается отмена, и код авторизации.
// Драйвер в ответ возвращает результат выполнения функции.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// После выполнения функции в параметре номера считанной карты возвращается
// номер прочитанной на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты. Если информация, считанная с карты,
//		передается в эквайринговую систему из конфигурации "1С:Предприятия",
//		содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [IN] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
//		Если при печати необходимо формировать несколько отдельных документов,
//		в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
//		Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ОтменитьПлатежПоПлатежнойКарте(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "") Экспорт
	
	КодОперации = 22;
	УстановитьОшибку(КодОперации, Истина);
	
	РезультатВозврата =
		ВернутьПлатежПоПлатежнойКарте(
			ИДУстройства, НомерКарты, Сумма, НомерЧека, КодRRN, КодАвторизации, ТекстКвитанции, Ложь);
	
	Если НЕ РезультатВозврата Тогда
		УстановитьОшибку(КодОперации, Ложь, "Ошибка выполнения операции");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РезультатВозврата;
	
КонецФункции

// Метод осуществляет пре-авторизацию, блокирование суммы на счете карты
// При необходимости заблокировать сумму на счете платежной карты Система
// вызывает метод "ПреавторизацияПоПлатежнойКарте (AuthorisationByPaymentCard)",
// передавая во входном параметре сумму для блокировки и номер считанной карты.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// Драйвер в ответ возвращает результат выполнения функции, код RRN, код авторизации и текст слип-чека.
// Текст слип-чека может быть самостоятельно распечатан терминалом на встроенном принтере
// или распечатан на ФР (определяется методом ПечатьКвитанцийНаТерминале).
// После выполнения функции в параметре номера считанной карты возвращается
// номер прочитанной на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты. Если информация, считанная с карты,
// передается в эквайринговую систему из конфигурации "1С:Предприятия",
// содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [OUT] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
// Если при печати необходимо формировать несколько отдельных документов, в тексте для их
// разделения должна присутствовать строка "[отрезка]" или "[cut]".
// Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ПреавторизацияПоПлатежнойКарте(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "") Экспорт
	
	КодОперации = 13;
	УстановитьОшибку(КодОперации, Ложь, "Преавторизация не поддерживается");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Отмена преавторизации.",
				Новый Структура("ИДУстройства,НомерКарты,Сумма,НомерЧека,КодRRN,КодАвторизации,ТекстКвитанции",
					ИДУстройства, НомерКарты, Сумма, НомерЧека, КодRRN, КодАвторизации, ТекстКвитанции),
				"Преавторизация не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Метод завершает пре-авторизацию, списывает сумму со счета карты
// При необходимости списания заблокированной суммы со счета платежной карты Система вызывает
// метод "ЗавершитьПреавторизациюПоПлатежнойКарте (AuthConfirmationByPaymentCard)",
// передавая во входном параметре сумму для списания с карты, номер считанной карты,
// код RRN операции блокировки и код авторизации.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// Драйвер в ответ возвращает результат выполнения функции, код RRN, код авторизации и текст слип-чека.
// Текст слип-чека может быть самостоятельно распечатан терминалом на встроенном принтере
// или распечатан на ФР (определяется методом ПечатьКвитанцийНаТерминале).
// После выполнения функции в параметре номера считанной карты возвращается
// номер прочитанной на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты. Если информация, считанная с карты,
// передается в эквайринговую систему из конфигурации "1С:Предприятия",
// содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [OUT] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
// Если при печати необходимо формировать несколько отдельных документов,
// в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
// Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "") Экспорт
	
	КодОперации = 14;
	УстановитьОшибку(КодОперации, Ложь, "Преавторизация не поддерживается.");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Отмена преавторизации.",
				Новый Структура("ИДУстройства,НомерКарты,Сумма,НомерЧека,КодRRN,КодАвторизации,ТекстКвитанции",
					ИДУстройства, НомерКарты, Сумма, НомерЧека, КодRRN, КодАвторизации, ТекстКвитанции),
				"Преавторизация не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Метод отменяет пре-авторизацию, разблокирует сумму на счете карты
// Для отмены блокирования суммы на счете платежной карты Система вызывает метод
// "ОтменитьПреавторизациюПоПлатежнойКарте (CancelAuthorisationByPaymentCard)",
// передавая во входном параметре сумму для списания с карты, номер считанной карты,
// код RRN операции блокировки и код авторизации.
// Если считывание карты будет производиться на терминале (PIN-Pad’e) банка,
// то в параметре номера считанной карты передается пустая строка.
// Драйвер в ответ возвращает результат выполнения функции, код RRN, код авторизации и текст слип-чека.
// Текст слип-чека может быть самостоятельно распечатан терминалом на встроенном принтере
// или распечатан на ФР (определяется методом ПечатьКвитанцийНаТерминале).
// После выполнения функции в параметре номера считанной карты возвращается
// номер прочитанной на терминале (PIN-Pad’e) банка карты.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	НомерКарты - Строка - [IN/OUT] Номер Карты / Данные карты.
//		Если информация, считанная с карты, передается в эквайринговую систему из конфигурации "1С:Предприятия",
//		содержание этого поля должно отвечать требованиям конкретной эквайринговой системы.
//	Сумма - Число - [IN] Сумма операции по карте
//	НомерЧека - Строка - [IN/OUT] Номер чека
//	КодRRN - Строка - [OUT] Уникальный код транзакции RRN
//	КодАвторизации - Строка - [OUT] Код авторизации транзакции
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
//		Если при печати необходимо формировать несколько отдельных документов,
//		в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
//		Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ИДУстройства, НомерКарты = "", Сумма, НомерЧека = "",
		КодRRN = "", КодАвторизации = "", ТекстКвитанции = "") Экспорт
	
	КодОперации = 15;
	УстановитьОшибку(КодОперации, Ложь, "Преавторизация не поддерживается.");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Отмена преавторизации.",
				Новый Структура("ИДУстройства,НомерКарты,Сумма,НомерЧека,КодRRN,КодАвторизации,ТекстКвитанции",
					ИДУстройства, НомерКарты, Сумма, НомерЧека, КодRRN, КодАвторизации, ТекстКвитанции),
				"Преавторизация не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Метод отменяет последнюю транзакцию
// Если операция по платежной карте прошла успешно и слип-чек должен
// быть распечатан на ФР (определяется методом ПечатьКвитанцийНаТерминале),
// но возникла ошибка печати, то операция по карте должна быть аварийно отменена.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция АварийнаяОтменаОперации(ИДУстройства) Экспорт
	
	КодОперации = 16;
	УстановитьОшибку(КодОперации, Ложь, "Аварийная отмена операции не поддерживается.");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Выполнение аварийной отмены операции.",
				Новый Структура("ИДУстройства", ИДУстройства),
				"Аварийная отмена операции не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Производится сверка итогов дня
// Для получения текста отчета Система вызывает метод "ИтогиДняПоКартам".
// Драйвер возвращает результат выполнения функции и текст отчета.
//
// Параметры:
//	ИДУстройства - Строка - [IN] Идентификатор устройства
//	ТекстКвитанции - Строка - [OUT] Текст квитанции, сформированный Эквайринговым ПО.
//		Если при печати необходимо формировать несколько отдельных документов,
//		в тексте для их разделения должна присутствовать строка "[отрезка]" или "[cut]".
//		Текст не должен содержать управляющие символы с кодами 1-8, 11-12, 14-31.
//
// Возвращаемое значение:
//	Булево - успешно или нет
//
Функция ИтогиДняПоКартам(ИДУстройства, ТекстКвитанции) Экспорт
	
	КодОперации = 17;
	УстановитьОшибку(КодОперации, Ложь, "Сверка итогов дня не поддерживается.");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Формирование сверки итогов дня.",
				Новый Структура("ИДУстройства,ТекстКвитанции", ИДУстройства, ТекстКвитанции),
				"Сверка итогов дня не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает будет ли  терминал самостоятельно печатать квитанции на своем принтере для операций
//
// Возвращаемое значение:
//	Булево - да или нет
//
Функция ПечатьКвитанцийНаТерминале() Экспорт
	
	КодОперации = 18;
	УстановитьОшибку(КодОперации, Ложь, "Печать квитинции не поддерживается.");
	
	Попытка
		ПараметрыЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Печать квитанции на терминале.", , "Печать квитинции не поддерживается.");
		ВыполнитьЗаписьЛога( , ПараметрыЛогирования);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

#Область Оповещения

Функция ОповещениеПроверкаОплатыQR(РезультатВыполнения, Знач Параметры) Экспорт
	
	РезультатВыполненияПроверки = Новый Структура;
	РезультатВыполненияПроверки.Вставить("Результат", Ложь);
	РезультатВыполненияПроверки.Вставить("Комментарий", "Проверка оплаты СБП.");
	РезультатВыполненияПроверки.Вставить("ОтветБанка", Неопределено);
	
	Попытка
		РезультатПроверкаОплаты = НачатьПроверкаОплатыQR(Параметры);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		РезультатВыполненияПроверки.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполненияПроверки.Комментарий, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатВыполненияПроверки;
	КонецПопытки;
	Если НЕ ТипЗнч(РезультатПроверкаОплаты) = Тип("Структура") Тогда
		КомментарийОшибки = СтрШаблон("%1 Тип результата проверки (%2) не соответсвует ожидаемому.",
				РезультатВыполнения.Комментарий, Строка(ТипЗнч(РезультатПроверкаОплаты)));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(КомментарийОшибки, УровеньЖурналаРегистрации.Предупреждение);
		ВыполнитьЗаписьЛогаПриОшибки(КомментарийОшибки);
		РезультатВыполненияПроверки.Комментарий = КомментарийОшибки;
		Возврат РезультатВыполненияПроверки;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(РезультатВыполненияПроверки, РезультатПроверкаОплаты, , "Комментарий");
	РезультатВыполненияПроверки.Комментарий = СтрШаблон("%1 %2",
			РезультатВыполненияПроверки.Комментарий, РезультатПроверкаОплаты.Комментарий);
	
	Возврат РезультатВыполненияПроверки;
	
КонецФункции

Функция ОповещениеОтменыОплатыQR(РезультатВыполнения, Знач Параметры) Экспорт
	
	Если СтрСравнить(Параметры.МетодОплаты, "КПС") = 0 Тогда
		// Ветка отмены оплаты по кассовой платежной ссылке
		Возврат ДеактивацияКассовойПлатежнойСсылки();
	Иначе
		Возврат РезультатВыполнения = Новый Структура("Результат,Комментарий,ДанныеОперации",
				Ложь, "Для текущего метода оплаты отмена не поддерживается", Неопределено);
	КонецЕсли;
	
КонецФункции

Процедура ОповещениеВыполнитьВозврат(РезультатВыполнения, Знач Параметры) Экспорт
	
	РезультатВВ = Новый Структура;
	ПараметрыВВ = Параметры;
	ВыполнитьВозврат(РезультатВВ, ПараметрыВВ);
	РезультатВыполнения = РезультатВВ;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Оплата

Функция ДлительнаяПроверкаОплатыQR(Знач Параметры, Знач ПараметрыОбработки, Знач АдресРезультата) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Фоновая проверка оплаты СБП.");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОбработки, , "ИдентификаторСессии");
	Если НЕ Подключить( , ПараметрыОбработки.ИдентификаторСессии) Тогда
		РезультатВыполнения.Комментарий =  СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Не удалось выполнить подключение.");
		Возврат Ложь;
	КонецЕсли;

	Попытка
		РезультатПроверкаОплаты = НачатьПроверкаОплатыQR(Параметры);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
		Возврат Ложь;
	КонецПопытки;
	Если НЕ ТипЗнч(РезультатПроверкаОплаты) = Тип("Структура") Тогда
		КомментарийОшибки = СтрШаблон("%1 Тип результата проверки (%2) не соответсвует ожидаемому.",
				РезультатВыполнения.Комментарий, Строка(ТипЗнч(РезультатПроверкаОплаты)));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(КомментарийОшибки, УровеньЖурналаРегистрации.Предупреждение);
		ВыполнитьЗаписьЛогаПриОшибки(КомментарийОшибки);
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПроверкаОплаты, , "Комментарий");
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
			РезультатВыполнения.Комментарий, РезультатПроверкаОплаты.Комментарий);
	
	Попытка
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область КассоваяПлатежнаяСсылка

Функция ПолучитьИдентификаторКассовойСсылки(КассоваяПлатежнаяСсылка) Экспорт
	
	ИдентификаторКассовойСсылки = Неопределено;
	
	МассивРазобраннаяСсылка = СтрРазделить(КассоваяПлатежнаяСсылка, "/", Ложь);
	Если МассивРазобраннаяСсылка.Количество() > 1 Тогда
		Идентификатор = МассивРазобраннаяСсылка.Получить(МассивРазобраннаяСсылка.ВГраница());
		ИдентификаторДанные = СтрРазделить(Идентификатор, "?", Ложь);
		Если НЕ ИдентификаторДанные.Количество() = 0 Тогда
			ИдентификаторКассовойСсылки = ИдентификаторДанные.Получить(0);
		Иначе
			ИдентификаторКассовойСсылки = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторКассовойСсылки;
	
КонецФункции

#КонецОбласти

#Область Логирование

Процедура ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Непредвиденная ошибка.", ,
				Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Причина,Описание",
					ИнформацияОбОшибке.ИмяМодуля,
					СокрЛП(ИнформацияОбОшибке.ИсходнаяСтрока),
					ИнформацияОбОшибке.НомерСтроки,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					ИнформацияОбОшибке.Описание));
	Иначе
		ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
		Комментарий = ОписаниеТипаСтрока.ПривестиЗначение(ИнформацияОбОшибке);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования(
				"Не типичное поведение программы.", , Новый Структура("Комментарий", Комментарий));
	КонецЕсли;
	
	ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке, УровеньЖурнала = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(УровеньЖурнала) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ИмяСобытия = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ИмяСобытия) Тогда
			ИмяСобытия = "Непредвиденная ошибка.";
		КонецЕсли;
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ИмяСобытия = "Не типичное поведение программы.";
		ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
		Комментарий = ОписаниеТипаСтрока.ПривестиЗначение(ИнформацияОбОшибке);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, УровеньЖурнала, , ЭтотОбъект.Метаданные().ПолноеИмя(), Комментарий);
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЛога(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Запись лога данных. %1");
	
	// Проверим, что логирование включено в настройках и прописан каталог сохранения логов
	ВестиЛогирование = Ложь;
	КаталогЛогирования = "";
	Попытка
		ВестиЛогирование = ПараметрыДрайвера.ВестиЛогирование;
		КаталогЛогирования = ПараметрыДрайвера.КаталогЛогирования;
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если НЕ ВестиЛогирование
		ИЛИ ПустаяСтрока(КаталогЛогирования) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Логирование отключено в настройках");
		Возврат;
	КонецЕсли;
	
	// Проверим, что данные для логирования имеют ожидаемый тип и структуру
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: отсутствуют данные для логирования");
		Возврат;
	КонецЕсли;
	Операция = ?(Параметры.Свойство("Операция"), Параметры.Операция, "");
	ВходящиеДанные = ?(Параметры.Свойство("ВходящиеДанные"), Параметры.ВходящиеДанные, "");
	Результат = ?(Параметры.Свойство("РезультатВыполнения"), Параметры.РезультатВыполнения, "");
	Заголовок = ?(Параметры.Свойство("Заголовок"), Параметры.Заголовок, Ложь);
	Если НЕ ЗначениеЗаполнено(Операция)
		И НЕ ЗначениеЗаполнено(ВходящиеДанные)
		И НЕ ЗначениеЗаполнено(РезультатВыполнения)
		И НЕ ЗначениеЗаполнено(Заголовок) Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: отсутствуют данные для логирования");
		Возврат;
	КонецЕсли;
	
	// Подготомив коллекцию данных и отдадим на пересериализацию
	// Получим готовую строку лога по операции
	КоллекцияДанныхЛогирования = Новый Структура;
	КоллекцияДанныхЛогирования.Вставить("Операция", Операция);
	КоллекцияДанныхЛогирования.Вставить("ИдентификаторСессии", Строка(ИдентификаторСессии));
	КоллекцияДанныхЛогирования.Вставить("Дата", ТекущаяДатаСеанса());
	КоллекцияДанныхЛогирования.Вставить("Данные",
		Новый Структура("ИсходныеДанные,РезультатДанные", ВходящиеДанные, Результат));
	Если Заголовок Тогда
		ДанныеСессии = Новый Структура;
		ДанныеСессии.Вставить("Сессия", Строка(ИдентификаторСессии));
		ДанныеСессии.Вставить("Данные", КоллекцияДанныхЛогирования);
		КоллекцияДанныхЛогирования = ДанныеСессии;
	КонецЕсли;
	РезультатПИК = Новый Структура;
	ПараметрыПИК = Новый Структура("КоллекцияПреобразования", КоллекцияДанныхЛогирования);
	JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
	Если НЕ РезультатПИК.Результат Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка сериализации: %1", РезультатПИК.Комментарий));
		Возврат;
	КонецЕсли;
	ТексЛогирования = РезультатПИК.JsonТекст;
	
	// Определим имя и расположение файла лога операции
	ИмяФайлаЛога = СтрШаблон("%1\%2_%3.%4",
			КаталогЛогирования,
			Формат(ТекущаяДатаСеанса(), "ДФ=ddMMyyyy"),
			СтрЗаменить(СокрЛП(ПараметрыДрайвера.РабочееМесто.Наименование), ".", "_"),
			РасширенияВнешнихФайловЛогирования.Общий);
	ПолноеИмяФайлаЛога = НормализоватьКаталог(ИмяФайлаЛога, Истина);
	
	ТексЛог = Новый ТекстовыйДокумент;
	ФайлЛог = Новый Файл(ПолноеИмяФайлаЛога);
	Попытка
		Если ФайлЛог.Существует() Тогда
			ТексЛог.Прочитать(ПолноеИмяФайлаЛога, КодировкаТекста.UTF8);
		Иначе
			#Если Клиент Тогда
			РезультатСК = Новый Структура;
			ПараметрыСК = Новый Структура("КаталогСоздания", ФайлЛог.Путь);
			КЮБ_ОбщегоНазначенияНаКлиенте.СоздатьКаталогОС(РезультатСК, ПараметрыСК);
			Если НЕ РезультатСК.Результат Тогда
				РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
						СтрШаблон("Ошибка создания каталога лога: %1", РезультатПИК.Комментарий));
				Возврат;
			КонецЕсли;
			#Иначе
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: не удалось создать каталог в контексте сервера");
			Возврат;
			#КонецЕсли
		КонецЕсли;
		ТексЛог.ДобавитьСтроку(ТексЛогирования);
		ТексЛог.Записать(ПолноеИмяФайлаЛога);
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка записи файла лога: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	
КонецПроцедуры

Функция ПолучитьРезультатаОплатыИзВременногоФайлаЛога() Экспорт
	
	Если ПустаяСтрока(АдресФайлаРезультатаОплаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОплатыДокумент = Новый ТекстовыйДокумент;
	РезультатОплатыДокумент.Прочитать(АдресФайлаРезультатаОплаты);
	РезультатОплаты = РезультатОплатыДокумент.ПолучитьТекст();
	РезПреобразования = Неопределено;
	JSONПреобразоватьВКоллекцию(РезПреобразования, Новый Структура("JsonТекст", РезультатОплаты));
	Если НЕ РезПреобразования.Результат Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезПреобразования.КоллекцияДанных;
		
КонецФункции

#КонецОбласти

#Область КоллекцииДанных

Процедура JSONПреобразоватьИзКоллекции(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Сериализация из Коллекции в JSON. %1");
	РезультатВыполнения.Вставить("JsonТекст", Неопределено);
	
	КоллекцияПреобразования = Параметры.КоллекцияПреобразования;
	ТипЗаписиДатыJSON = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	Если Параметры.Свойство("ТипЗаписиДатыJSON")
		И ТипЗнч(Параметры.ТипЗаписиДатыJSON) = Тип("ВариантЗаписиДатыJSON") Тогда
		ТипЗаписиДатыJSON = Параметры.ТипЗаписиДатыJSON;
	КонецЕсли;
	
	JsonТекст = Неопределено;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб);
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ТипЗаписиДатыJSON;
	Если ТипЗаписиДатыJSON = ВариантЗаписиДатыJson.УниверсальнаяДата Тогда
		НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, КоллекцияПреобразования, НастройкиСериализацииJSON, "JSONСериализация", ЭтотОбъект);
		ЗаписьJSON.ПроверятьСтруктуру = Истина;
		JsonТекст = ЗаписьJSON.Закрыть();
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	РезультатВыполнения.JsonТекст = JsonТекст;
	
КонецПроцедуры

Процедура JSONПреобразоватьВКоллекцию(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Сериализация из JSON в Коллекцию Данных. %1");
	РезультатВыполнения.Вставить("КоллекцияДанных", Неопределено);
	
	JsonТекст = Параметры.JsonТекст;
	
	КоллекцияДанных = Неопределено;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(JsonТекст);
		КоллекцияДанных = ПрочитатьJSON(ЧтениеJSON, Ложь);
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	РезультатВыполнения.КоллекцияДанных = КоллекцияДанных;
	
КонецПроцедуры

Функция JSONСериализация(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	СериализованноеЗначение = "Значение не сериализовано";
	Попытка
		СериализованноеЗначение = Строка(Значение);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	СериализованноеЗначение = СтрШаблон("%1 [исходный тип: %2]", СериализованноеЗначение, ТипЗнч(Значение));
	
	Возврат СериализованноеЗначение;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция КонструкторПараметровЗаписиЛогирования(
		Операция = "", ВходящиеДанные = Неопределено, РезультатВыполнения = Неопределено, Заголовок = Ложь) Экспорт
	
	ПараметрыЗаписиЛогирования = Новый Структура();
	ПараметрыЗаписиЛогирования.Вставить("Операция", Операция);
	ПараметрыЗаписиЛогирования.Вставить("ВходящиеДанные", ВходящиеДанные);
	ПараметрыЗаписиЛогирования.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПараметрыЗаписиЛогирования.Вставить("Заголовок", Заголовок);
	
	Возврат ПараметрыЗаписиЛогирования;
	
КонецФункции

#КонецОбласти

#Область СведенияОПрограмме

Функция ВернутьСведенияДляЗаголовкаФормы(Заголовок = "") Экспорт
	
	СведенияДляЗаголовка = "";
	АктуальныеСведенияОПрограмме = ПолучитьАктуальныеСведенияОПрограмме();
	
	Попытка
		Наименование = СокрЛП(АктуальныеСведенияОПрограмме.Наименование);
		Версия = Строка(АктуальныеСведенияОПрограмме.Версия);
		ДатаВерсии = Строка(АктуальныеСведенияОПрограмме.ДатаВерсии);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат СведенияДляЗаголовка;
	КонецПопытки;
	
	СведенияДляЗаголовка = СтрШаблон("%1. v.%2 [%3]", Наименование, Версия, ДатаВерсии);
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		СведенияДляЗаголовка = СтрШаблон("%1. %2", Заголовок, СведенияДляЗаголовка);
	КонецЕсли;
	
	Возврат СведенияДляЗаголовка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оплата

Функция ОплатитьДинамическимКодом(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Оплата динамическим qr-кодом.");
	РезультатВыполнения.Вставить("КодRRN", Неопределено);
	РезультатВыполнения.Вставить("КодАвторизации", Неопределено);
	РезультатВыполнения.Вставить("НомерЧека", Неопределено);
	РезультатВыполнения.Вставить("ТекстКвитанции", Неопределено);
	
	Сумма = Параметры.Сумма;
	ВалютаОперации = "RUB";
	НазначениеПлатежа = СтрШаблон("Оплата СБП %1", ПараметрыСеанса.ТекущаяФирма.Бренд.Наименование);
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Ошибка выполнения: Ошибка соединения с процессингом банка");
			Возврат РезультатВыполнения;
		КонецЕсли;
		#Иначе
		РезультатВыполнения.Комментарий = "";
		Возврат РезультатВыполнения;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	ИсточникВыводаQR = Неопределено;
	Если ПараметрыДрайвера.Свойство("ИсточникВыводаQR") Тогда
		ИсточникВыводаQR = ПараметрыДрайвера.ИсточникВыводаQR;
	КонецЕсли;
	Если ИсточникВыводаQR = Неопределено Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: не определен тип вывода QR-кода");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	АдресРесурсаЗапросКода = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаЗапросКода") Тогда
		АдресРесурсаЗапросКода = ПараметрыДрайвера.ПроцессингАдресРесурсаЗапросКода;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаЗапросКода) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует адрес ресурса запроса QR-кода");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	АдресРесурсаПроверкиСтатусаОперации = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаПроверкиСтатусаОперации") Тогда
		АдресРесурсаПроверкиСтатусаОперации = ПараметрыДрайвера.ПроцессингАдресРесурсаПроверкиСтатусаОперации;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаПроверкиСтатусаОперации) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует адрес ресурса запроса QR-кода");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует идентификатор ТСП (merchantid)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РасчетныйСчетЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРасчетныйСчетЮЛ") Тогда
		РасчетныйСчетЮЛ = ПараметрыДрайвера.БанкРасчетныйСчетЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РасчетныйСчетЮЛ) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует расчетный счет ЮЛ (account)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует регистрационный номер ЮЛ (UserLogin)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ВремяЖизниQRКода = 1; // мин.
	Если ПараметрыДрайвера.Свойство("ПроцессингВремяЖизниQRКода") Тогда
		ВремяЖизниQRКода = ПараметрыДрайвера.ПроцессингВремяЖизниQRКода;
		Если ВремяЖизниQRКода < 1 Тогда
			ВремяЖизниQRКода = 1;
		КонецЕсли;
	КонецЕсли;
	ИнтервалОжиданияОплаты = ВремяЖизниQRКода * 60; // сек.
	
	ДисплейПорт = "";
	Если ПараметрыДрайвера.Свойство("ДисплейПорт") Тогда
		ДисплейПорт = ПараметрыДрайвера.ДисплейПорт;
	КонецЕсли;
	Если ПустаяСтрока(ДисплейПорт) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Не установлен порт подключения QR-дисплея");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		РезультатФормированиеДПС =
			ВыполнитьФормированиеДинамическойПлатежнойСсылки(ИдентификаторТСП, РасчетныйСчетЮЛ,
				РегистрационныйНомерЮЛ, ВремяЖизниQRКода, Сумма, ВалютаОперации, НазначениеПлатежа, АдресРесурсаЗапросКода);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.Комментарий = СтрШаблон("%1 Ошибка выполнения: %2",
				РезультатВыполнения.Комментарий, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатВыполнения;
	КонецПопытки;
	Если НЕ РезультатФормированиеДПС.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатФормированиеДПС.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Если ИсточникВыводаQR = 1 Тогда
		// Выведем полученные данные в виде QR-кода на дисплей
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(ДисплейПорт, "QR", РезультатФормированиеДПС.ДинамическаяПлатежнаяСсылка);
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Вывод информациии на QR-дисплей", ПараметрыВД, РезультатВД));
		Если НЕ РезультатВД.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатВД.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
	ИначеЕсли ИсточникВыводаQR = 2 Тогда
		// Выведем полученные данные на печать ККМ в виде QR-кода
		// Подключаем ККМ
		РезультатПККМ = Новый Структура;
		ПодключениеККМ(РезультатПККМ);
		Если НЕ РезультатПККМ.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПККМ.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
		ККМ = РезультатПККМ.ККМ;
		// Печатаем QR на ККМ
		ПараметрыПК = КонструкторПараметровПечатиНаККМ(
				ККМ, СтрШаблон("Сумма оплаты: %1 РУБ.",
					Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧРГ=' '")),
				РезультатФормированиеДПС.ДинамическаяПлатежнаяСсылка);
		РезультатПК = QRПечатьНаККМ(ПараметрыПК);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выполнение печати данных на ККМ", ПараметрыПК, РезультатПК));
		Если НЕ РезультатПК.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПК.Комментарий);
			Попытка
				ККМ.ОтключитьОбъектККМ();
			Исключение
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			Возврат РезультатВыполнения;
		КонецЕсли;
		Попытка
			ККМ.ОтключитьОбъектККМ();
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	// Запрос на получение статуса по операции (оплаты)
	// Подгатавливаем данные для запроса передаем их в форму,
	// после открытия вызываем из формы оповещение где выполняем запрос
	ПараметрыОжиданияОплаты = Новый Структура;
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторОперации", РезультатФормированиеДПС.ИдентификаторОперации);
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторОперрацииБанка", РезультатФормированиеДПС.ИдентификаторОперрацииБанка);
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторQR", РезультатФормированиеДПС.ИдентификаторQR);
	ПараметрыОжиданияОплаты.Вставить("ИнтервалОжиданияОплаты", ИнтервалОжиданияОплаты);
	ПараметрыОжиданияОплаты.Вставить("АдресРесурсаПроверкиСтатусаОперации", АдресРесурсаПроверкиСтатусаОперации);
	ПараметрыОжиданияОплаты.Вставить("РегистрационныйНомерЮЛ", РегистрационныйНомерЮЛ);
	ПараметрыОжиданияОплаты.Вставить("МетодОплаты", "DQR");
	
	ПараметрыОтменыОплаты = Новый Структура;
	ПараметрыОтменыОплаты.Вставить("МетодОплаты", "DQR");
	
	ФормаОжиданиеОплаты =
		ЭтотОбъект.ПолучитьФорму("ОжиданиеОплаты", ЭтотОбъект, Новый УникальныйИдентификатор); // BSLLS:GetFormMethod-off
	#Если Клиент Тогда
	ФормаОжиданиеОплаты.ОповещениеПроверкаОплатыQR =
		Новый ОписаниеОповещения("ОповещениеПроверкаОплатыQR", ЭтотОбъект, ПараметрыОжиданияОплаты);
	ФормаОжиданиеОплаты.ОповещениеОтменыОплатыQR =
		Новый ОписаниеОповещения("ОповещениеОтменыОплатыQR", ЭтотОбъект, ПараметрыОтменыОплаты);
	#КонецЕсли
	ФормаОжиданиеОплаты.ЭлементыФормы.QR.Картинка =
		Новый Картинка(ГенерацияШтрихкода.ДанныеQRКода(РезультатФормированиеДПС.ДинамическаяПлатежнаяСсылка, 3, 600));
	ФормаОжиданиеОплаты.ЭлементыФормы.СуммаОплаты.Заголовок =
		СтрШаблон("Сумма: %1 RUB", Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
	РезультатПроверкаОплатыQR = ФормаОжиданиеОплаты.ОткрытьМодально();
	
	КодRRN = Неопределено;
	НомерЧека = Неопределено;
	ТекстКвитанции = Неопределено;
	ИдентификаторОперрацииСБП = Неопределено;
	Если ТипЗнч(РезультатПроверкаОплатыQR.ОтветБанка) = Тип("Структура") Тогда
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("sourceId") Тогда
			КодRRN = РезультатПроверкаОплатыQR.ОтветБанка.sourceId;
		КонецЕсли;
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("paymentData")
			И РезультатПроверкаОплатыQR.ОтветБанка.paymentData.Свойство("documentId") Тогда
			НомерЧека = РезультатПроверкаОплатыQR.ОтветБанка.paymentData.documentId;
		КонецЕсли;
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("data")
			И РезультатПроверкаОплатыQR.ОтветБанка.data.Свойство("trxId") Тогда
			ИдентификаторОперрацииСБП = РезультатПроверкаОплатыQR.ОтветБанка.data.trxId;
		КонецЕсли;
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", РезультатПроверкаОплатыQR.ОтветБанка);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если РезультатПИК.Результат Тогда
			ТекстКвитанции = РезультатПИК.JsonТекст;
		КонецЕсли;
	КонецЕсли;
	
	// Выполним выключение QR-Дисплея
	Если ИсточникВыводаQR = 1 Тогда
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(ДисплейПорт, Неопределено, Неопределено, 1);
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выключение QR-дисплея", ПараметрыВД, РезультатВД));
	КонецЕсли;
	
	Если НЕ РезультатПроверкаОплатыQR.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
				РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПроверкаОплатыQR.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, "Операция успешно выполнена");
	РезультатВыполнения.КодRRN = СтрШаблон("rsb_qr:%1", КодRRN);
	РезультатВыполнения.КодАвторизации = СтрШаблон("%1:%2", КодRRN, ИдентификаторОперрацииСБП);
	РезультатВыполнения.НомерЧека = НомерЧека;
	РезультатВыполнения.ТекстКвитанции = ТекстКвитанции;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ВыполнитьФормированиеДинамическойПлатежнойСсылки(
		ИдентификаторТСП, РасчетныйСчетЮЛ, РегистрационныйНомерЮЛ,
		ВремяЖизниQRКода, Сумма, ВалютаОперации, НазначениеПлатежа, АдресРесурсаЗапросКода)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Формирование динамической платежной ссылки.");
	РезультатВыполнения.Вставить("ДинамическаяПлатежнаяСсылка", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторОперации", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторОперрацииБанка", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторQR", Неопределено);
	
	// Запрос формирования QR-кода на процессинге
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	ИнтервалПаузы = 3;
	Успех = Ложь;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(
			СтрШаблон("СБП. Запрос формирования динамического QR-кода. Попытка: %1", Строка(ПопыткаЗапроса)));
		#КонецЕсли
		
		SourceId = УникальныйИдентификаторОперации; // Уникальный идентификатор операции
		TerminalId =
			Лев(СтрЗаменить(Строка(ПараметрыСеанса.РабочееМестоКлиента.Код), "-", ""), 12); // Идентификатор устройства
		MerchantId = СокрЛП(ИдентификаторТСП); // Идентификатор ТСП
		Account = СокрЛП(РасчетныйСчетЮЛ); // Счет юр.лица
		TemplateVersion = "01"; // Версия протокола
		QrcType = "02"; // Тип QR-Кода, "01"-статичный, "02"-динамический
		QrcExpire = ВремяЖизниQRКода; // Время жизни QR-Кода в минутах (только для динамического кода)
		Amount = Число(Сумма) * 100; // Сумма в минимальных единицах валюты (копейки)
		Currency = ВалютаОперации; // Валюта операции
		PaymentPurpose = НазначениеПлатежа; // Назначение платежа
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", SourceId);
		СтруктураТелоЗапроса.Вставить("terminalId", TerminalId);
		СтруктураТелоЗапроса.Вставить("merchantId", MerchantId);
		СтруктураТелоЗапроса.Вставить("account", Account);
		СтруктураТелоЗапроса.Вставить("templateVersion", TemplateVersion);
		СтруктураТелоЗапроса.Вставить("qrcType", QrcType);
		СтруктураТелоЗапроса.Вставить("qrcExpire", QrcExpire);
		СтруктураТелоЗапроса.Вставить("amount", Amount);
		СтруктураТелоЗапроса.Вставить("currency", Currency);
		СтруктураТелоЗапроса.Вставить("paymentPurpose", PaymentPurpose);
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПИК.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос на формирование QR-кода
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаЗапросКода);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Формирование динамической платежной ссылки.");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: Процессинг банка.
					| Ошибка формирования QR-кода. В ответе отсутствуют ожидаемые поля 'code' или 'message'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		Если СтруктураОтветСервера.code = "-3"
			ИЛИ СтруктураОтветСервера.code = "-5" Тогда
			// (-3) В случае отказа в выпуске QR-кода с кодом ответа «-3», необходимо повторить запрос, при этом
			// параметр «sourceId» не должен повторяться
			// (-5) Нарушена уникальность sourceId, сформируйте новый запрос
			УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
			Пауза(ИнтервалПаузы);
			Продолжить;
		ИначеЕсли СтруктураОтветСервера.code = "-4" Тогда
			// В случае отказа с кодом ответа «-4», необходимо повторить запрос, с тем же параметром
			// «sourceId», что и в предыдущем запросе.
			Пауза(ИнтервалПаузы);
			Продолжить;
		ИначеЕсли НЕ СтруктураОтветСервера.code = "0" Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3 (%4: %5)",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: Процессинг банка. Ошибка формирования QR-кода:",
					Строка(СтруктураОтветСервера.message),
					Строка(СтруктураОтветСервера.code),
					ОписаниеКодаОтвета);
			Возврат РезультатВыполнения;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("sourceId")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("operationId") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: Процессинг банка.
					| Ошибка формирования QR-кода. В ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("data")
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("payload")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.payload)
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("qrcId")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.qrcId) Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: Процессинг банка.
					| Ошибка формирования QR-кода. В ответе отсутствуют ожидаемые поля 'data', 'data.payload', 'data.qrcId'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		Успех = Истина;
		Прервать;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	Если НЕ Успех Тогда
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, "Ошибка выполнения.");
		КонецЕсли;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, "Операция успешно выполнена.");
	РезультатВыполнения.ДинамическаяПлатежнаяСсылка = СтруктураОтветСервера.data.payload;
	РезультатВыполнения.ИдентификаторОперации = СтруктураОтветСервера.sourceId;
	РезультатВыполнения.ИдентификаторОперрацииБанка = СтруктураОтветСервера.operationId;
	РезультатВыполнения.ИдентификаторQR = СтруктураОтветСервера.data.qrcId;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ОплатитьКассовойПлатежнойСсылкой(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Оплата кассовой платежной ссылкой.");
	РезультатВыполнения.Вставить("КодRRN", Неопределено);
	РезультатВыполнения.Вставить("КодАвторизации", Неопределено);
	РезультатВыполнения.Вставить("НомерЧека", Неопределено);
	РезультатВыполнения.Вставить("ТекстКвитанции", Неопределено);
	РезультатВыполнения.Вставить("ПлатежнаяСсылкаАктивна", Ложь);
	
	Сумма = Неопределено;
	ВалютаОперации = "RUB";
	НазначениеПлатежа = СтрШаблон("Оплата СБП %1", ПараметрыСеанса.ТекущаяФирма.Бренд.Наименование);
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("Сумма")
			И ТипЗнч(Параметры.Сумма) = Тип("Число")
			И Параметры.Сумма > 0 Тогда
			Сумма = Параметры.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Ошибка выполнения: Ошибка соединения с процессингом банка");
			Возврат РезультатВыполнения;
		КонецЕсли;
		#Иначе
		РезультатВыполнения.Комментарий = "";
		Возврат РезультатВыполнения;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	ИсточникВыводаQR = Неопределено;
	Если ПараметрыДрайвера.Свойство("ИсточникВыводаQR") Тогда
		ИсточникВыводаQR = ПараметрыДрайвера.ИсточникВыводаQR;
	КонецЕсли;
	Если ИсточникВыводаQR = Неопределено Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: не определен тип вывода QR-кода");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторСозданияКПС = "";
	КассоваяПлатежнаяСсылка = "";
	ИдентификаторКассовойСсылки = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингКассоваяПлатежнаяСсылка") Тогда
		Коллекция = СтрРазделить(СокрЛП(ПараметрыДрайвера.ПроцессингКассоваяПлатежнаяСсылка), ">", Ложь);
		Если Коллекция.Количество() = 1 Тогда
			КассоваяПлатежнаяСсылка = Коллекция.Получить(0);
		Иначе
			ИдентификаторСозданияКПС = Коллекция.Получить(0);
			КассоваяПлатежнаяСсылка = Коллекция.Получить(1);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КассоваяПлатежнаяСсылка) Тогда
		ИдентификаторКассовойСсылки = ПолучитьИдентификаторКассовойСсылки(КассоваяПлатежнаяСсылка);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КассоваяПлатежнаяСсылка)
		ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторКассовойСсылки)
		ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторСозданияКПС) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует кассовая платежная ссылка или ее идентификаторы");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	АдресРесурсаАктивацииКассовойСсылки = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаАктивацииКассовойСсылки") Тогда
		АдресРесурсаАктивацииКассовойСсылки = ПараметрыДрайвера.ПроцессингАдресРесурсаАктивацииКассовойСсылки;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаАктивацииКассовойСсылки) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует адрес ресурса запроса активации кассовой ссылки");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	АдресРесурсаПроверкиСтатусаОплатыПоСсылке = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаПроверкиСтатусаОплатыПоСсылке") Тогда
		АдресРесурсаПроверкиСтатусаОплатыПоСсылке = ПараметрыДрайвера.ПроцессингАдресРесурсаПроверкиСтатусаОплатыПоСсылке;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаПроверкиСтатусаОплатыПоСсылке) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует адрес ресурса запроса статуса оплаты");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует идентификатор ТСП (merchantid)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РасчетныйСчетЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРасчетныйСчетЮЛ") Тогда
		РасчетныйСчетЮЛ = ПараметрыДрайвера.БанкРасчетныйСчетЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РасчетныйСчетЮЛ) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует расчетный счет ЮЛ (account)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует регистрационный номер ЮЛ (UserLogin)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ВремяОжиданияОплатыПоСсылке = 1; // мин
	ВремяЖизниАктивированнойСсылки = 5; // мин.
	Если ПараметрыДрайвера.Свойство("ПроцессингВремяЖизниQRКода") Тогда
		ВремяОжиданияОплатыПоСсылке = ПараметрыДрайвера.ПроцессингВремяЖизниQRКода;
		Если ВремяОжиданияОплатыПоСсылке < 1 Тогда
			ВремяОжиданияОплатыПоСсылке = 1;
		ИначеЕсли ВремяОжиданияОплатыПоСсылке > 20 Тогда
			ВремяОжиданияОплатыПоСсылке = 20;
		КонецЕсли;
	КонецЕсли;
	Если ВремяОжиданияОплатыПоСсылке < 5 Тогда
		ВремяЖизниАктивированнойСсылки = 5;
	Иначе
		ВремяЖизниАктивированнойСсылки = ВремяОжиданияОплатыПоСсылке;
	КонецЕсли;
	ИнтервалОжиданияОплаты = ВремяОжиданияОплатыПоСсылке * 60; // сек.
	
	ДисплейПорт = "";
	Если ПараметрыДрайвера.Свойство("ДисплейПорт") Тогда
		ДисплейПорт = ПараметрыДрайвера.ДисплейПорт;
	КонецЕсли;
	
	// Проверим получены ли обязательные данные (идентификатор кассовой ссылки, сумма и пр)
	// Если не заполнены выведем диалог для ввода
	// Актуально при тестирование и выполение действий из меню элемента подключаемого оборудования
	ФлагНеЗаполненные = Ложь;
	#Если Клиент Тогда
	Если КассоваяПлатежнаяСсылка = Неопределено Тогда
		Если НЕ ВвестиСтроку(КассоваяПлатежнаяСсылка, "Идентификатор активной кассовой ссылки")
			ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(КассоваяПлатежнаяСсылка)) Тогда
			ФлагНеЗаполненные = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ИдентификаторКассовойСсылки = Неопределено Тогда
		Если НЕ ВвестиСтроку(ИдентификаторКассовойСсылки, "Идентификатор активной кассовой ссылки")
			ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(ИдентификаторКассовойСсылки)) Тогда
			ФлагНеЗаполненные = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Сумма = Неопределено Тогда
		Если НЕ ВвестиЧисло(Сумма, "Сумма оплаты", , 2)
			ИЛИ Сумма <= 0 Тогда
			ФлагНеЗаполненные = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ВалютаОперации = Неопределено Тогда
		Если НЕ ВвестиСтроку(ВалютаОперации, "Валюта операции")
			ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(ВалютаОперации)) Тогда
			ФлагНеЗаполненные = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НазначениеПлатежа = Неопределено Тогда
		Если НЕ ВвестиСтроку(НазначениеПлатежа, "Назначение платежа")
			ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(НазначениеПлатежа)) Тогда
			ФлагНеЗаполненные = Истина;
		КонецЕсли;
	КонецЕсли;
	#Иначе
	ФлагНеЗаполненные = Истина;
	#КонецЕсли
	Если ФлагНеЗаполненные Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий,
				"Ошибка выполнения: не заполнен(ы) обязательные поля:
				| 'Кассовая платежная ссылка', 
				| 'Идентификатор активной кассовой ссылки', 
				| 'Сумма оплаты', 
				| 'Валюта операции', 
				| 'Назначение платежа'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		РезультатФормированиеКПС = ВыполнитьАктивациюКассовойПлатежнойСсылки(
				ИдентификаторТСП, РасчетныйСчетЮЛ, РегистрационныйНомерЮЛ, ИдентификаторКассовойСсылки,
				ВремяЖизниАктивированнойСсылки, Сумма, ВалютаОперации, НазначениеПлатежа, АдресРесурсаАктивацииКассовойСсылки);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.Комментарий = СтрШаблон("%1 Ошибка выполнения: %2",
				РезультатВыполнения.Комментарий, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатВыполнения;
	КонецПопытки;
	Если НЕ РезультатФормированиеКПС.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатФормированиеКПС.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	РезультатВыполнения.ПлатежнаяСсылкаАктивна = Истина;
	
	Если ИсточникВыводаQR = 1 Тогда
		// Выведем полученные данные в виде QR-кода на дисплей
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(ДисплейПорт, "QR", КассоваяПлатежнаяСсылка);
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Вывод информациии на QR-дисплей", ПараметрыВД, РезультатВД));
		Если НЕ РезультатВД.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатВД.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
	ИначеЕсли ИсточникВыводаQR = 2 Тогда
		// Выведем полученные данные на печать ККМ в виде QR-кода
		// одключаем ККМ
		РезультатПККМ = Новый Структура;
		ПодключениеККМ(РезультатПККМ);
		Если НЕ РезультатПККМ.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПККМ.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
		ККМ = РезультатПККМ.ККМ;
		// Печатаем QR на ККМ
		ПараметрыПК = КонструкторПараметровПечатиНаККМ(
				ККМ, СтрШаблон("Сумма оплаты: %1 РУБ.", Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧРГ=' '")), КассоваяПлатежнаяСсылка);
		РезультатПК = QRПечатьНаККМ(ПараметрыПК);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выполнение печати данных на ККМ", ПараметрыПК, РезультатПК));
		Если НЕ РезультатПК.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПК.Комментарий);
			Попытка
				ККМ.ОтключитьОбъектККМ();
			Исключение
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			Возврат РезультатВыполнения;
		КонецЕсли;
		Попытка
			ККМ.ОтключитьОбъектККМ();
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	//////////////////////////////
	
	// //////////////////////////// Запрос на получение статуса по операции (оплаты)
	// Подгатавливаем данные для запроса передаем их в форму,
	// после открытия вызываем из формы оповещение где выполняем запрос
	ПараметрыОжиданияОплаты = Новый Структура;
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторОперацииАктивации", РезультатФормированиеКПС.ИдентификаторОперацииАктивации);
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторТерминала", РезультатФормированиеКПС.ИдентификаторТерминала);
	ПараметрыОжиданияОплаты.Вставить("ИдентификаторТСП", РезультатФормированиеКПС.ИдентификаторТСП);
	ПараметрыОжиданияОплаты.Вставить("ИнтервалОжиданияОплаты", ИнтервалОжиданияОплаты);
	ПараметрыОжиданияОплаты.Вставить("АдресРесурсаПроверкиСтатусаОперации", АдресРесурсаПроверкиСтатусаОплатыПоСсылке);
	ПараметрыОжиданияОплаты.Вставить("РегистрационныйНомерЮЛ", РегистрационныйНомерЮЛ);
	ПараметрыОжиданияОплаты.Вставить("МетодОплаты", "КПС");
	
	ПараметрыОтменыОплаты = Новый Структура;
	ПараметрыОтменыОплаты.Вставить("МетодОплаты", "КПС");
	
	ФормаОжиданиеОплаты = ЭтотОбъект.ПолучитьФорму("ОжиданиеОплаты"); // BSLLS:GetFormMethod-off
	#Если Клиент Тогда
	ФормаОжиданиеОплаты.ОповещениеПроверкаОплатыQR =
		Новый ОписаниеОповещения("ОповещениеПроверкаОплатыQR", ЭтотОбъект, ПараметрыОжиданияОплаты);
	ФормаОжиданиеОплаты.ОповещениеОтменыОплатыQR =
		Новый ОписаниеОповещения("ОповещениеОтменыОплатыQR", ЭтотОбъект, ПараметрыОтменыОплаты);
	#КонецЕсли
	ФормаОжиданиеОплаты.ЭлементыФормы.QR.Картинка =
		Новый Картинка(ГенерацияШтрихкода.ДанныеQRКода(КассоваяПлатежнаяСсылка, 3, 600));
	ФормаОжиданиеОплаты.ЭлементыФормы.СуммаОплаты.Заголовок =
		СтрШаблон("Сумма: %1 RUB", Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
	РезультатПроверкаОплатыQR = ФормаОжиданиеОплаты.ОткрытьМодально();
	
	НомерЧека = Неопределено;
	ТекстКвитанции = Неопределено;
	ИдентификаторОперацииСБП = Неопределено;
	Если ТипЗнч(РезультатПроверкаОплатыQR.ОтветБанка) = Тип("Структура") Тогда
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("sourceId") Тогда
			КодRRN = РезультатПроверкаОплатыQR.ОтветБанка.sourceId;
		КонецЕсли;
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("data")
			И РезультатПроверкаОплатыQR.ОтветБанка.data.Свойство("trxId") Тогда
			ИдентификаторОперацииСБП = РезультатПроверкаОплатыQR.ОтветБанка.data.trxId;
		КонецЕсли;
		
		Если РезультатПроверкаОплатыQR.ОтветБанка.Свойство("paymentData")
			И РезультатПроверкаОплатыQR.ОтветБанка.paymentData.Свойство("documentId") Тогда
			НомерЧека = РезультатПроверкаОплатыQR.ОтветБанка.paymentData.documentId;
		КонецЕсли;
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", РезультатПроверкаОплатыQR.ОтветБанка);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если РезультатПИК.Результат Тогда
			ТекстКвитанции = РезультатПИК.JsonТекст;
		КонецЕсли;
	КонецЕсли;
	Если РезультатПроверкаОплатыQR.Свойство("РезультатОтменаОплаты")
		И РезультатПроверкаОплатыQR.РезультатОтменаОплаты.Свойство("Результат") Тогда
		РезультатВыполнения.ПлатежнаяСсылкаАктивна = НЕ РезультатПроверкаОплатыQR.РезультатОтменаОплаты.Результат;
	КонецЕсли;
	
	// Выполним выключение QR-Дисплея
	Если ИсточникВыводаQR = 1 Тогда
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(ДисплейПорт, Неопределено, Неопределено, 1);
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выключение QR-дисплея", ПараметрыВД, РезультатВД));
	КонецЕсли;
	
	Если НЕ РезультатПроверкаОплатыQR.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
				РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПроверкаОплатыQR.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, "Операция успешно выполнена");
	РезультатВыполнения.КодRRN = СтрШаблон("rsb_qr:%1", КодRRN);
	РезультатВыполнения.КодАвторизации = СтрШаблон("%1:%2", ИдентификаторСозданияКПС, ИдентификаторОперацииСБП);
	РезультатВыполнения.НомерЧека = НомерЧека;
	РезультатВыполнения.ТекстКвитанции = ТекстКвитанции;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ВыполнитьАктивациюКассовойПлатежнойСсылки(
		ИдентификаторТСП, РасчетныйСчетЮЛ, РегистрационныйНомерЮЛ, ИдентификаторКассовойСсылки,
		ВремяЖизниАктивированнойСсылки, Сумма, ВалютаОперации, НазначениеПлатежа, АдресРесурсаАктивацииКассовойСсылки)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Активация кассовой платежной ссылки.");
	РезультатВыполнения.Вставить("ИдентификаторОперацииАктивации", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторТерминала", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторТСП", Неопределено);
	
	// Запрос активации кассовой платежной ссылки на процессинге
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	ИнтервалПаузы = 3;
	ФлагУспешноВыполнено = Ложь;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(СтрШаблон("СБП. Запрос активации кассовой платежной ссылки СБП. Попытка: %1", Строка(ПопыткаЗапроса)));
		#КонецЕсли
		
		SourceId = УникальныйИдентификаторОперации; // Уникальный идентификатор операции
		// Идентификатор устройства
		TerminalId = Лев(СтрЗаменить(Строка(ПараметрыСеанса.РабочееМестоКлиента.Код), "-", ""), 12);
		MerchantId = СокрЛП(ИдентификаторТСП); // Идентификатор ТСП
		Account = СокрЛП(РасчетныйСчетЮЛ); // Счет юр.лица
		QrcId = СокрЛП(ИдентификаторКассовойСсылки); // Идентификатор зарегистрированной Кассовой ссылки СБП
		Amount = Число(Сумма) * 100; // Сумма операции в копейках
		Currency = ВалютаОперации; // Валюта операции
		PaymentPurpose = НазначениеПлатежа; // Назначение платежа
		CashQrcExpire = ВремяЖизниАктивированнойСсылки; // Срок жизни активированной Кассовой ссылки в минутах
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", SourceId);
		СтруктураТелоЗапроса.Вставить("terminalId", TerminalId);
		СтруктураТелоЗапроса.Вставить("merchantId", MerchantId);
		СтруктураТелоЗапроса.Вставить("account", Account);
		СтруктураТелоЗапроса.Вставить("qrcId", QrcId);
		СтруктураТелоЗапроса.Вставить("amount", Amount);
		СтруктураТелоЗапроса.Вставить("currency", Currency);
		СтруктураТелоЗапроса.Вставить("paymentPurpose", PaymentPurpose);
		СтруктураТелоЗапроса.Вставить("cashQrcExpire", CashQrcExpire);
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПИК.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос на формирование QR-кода
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаАктивацииКассовойСсылки);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Активация кассовой платежной ссылки");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структуру для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'code' или 'message'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		КодыВозврата = Новый Массив;
		КодыВозврата.Добавить("-44");
		Если НЕ КодыВозврата.Найти(СтруктураОтветСервера.code) = Неопределено Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 Ошибка выполнения: %2",
					РезультатВыполнения.Комментарий, ОписаниеКодаОтвета);
			Возврат РезультатВыполнения;
		ИначеЕсли НЕ СтруктураОтветСервера.code = "0" Тогда
			УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("sourceId")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("operationId")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("paramsId") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId' или 'paramsId'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		ФлагУспешноВыполнено = Истина;
		Прервать;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	Если НЕ ФлагУспешноВыполнено Тогда
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3 (%4)",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: все попытки активировать платежную ссылку закончились неудачно. Код ответа:",
					Строка(СтруктураОтветСервера.code),
					ОписаниеКодаОтвета);
		КонецЕсли;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, "Операция успешно выполнена.");
	РезультатВыполнения.ИдентификаторОперацииАктивации = СтруктураОтветСервера.sourceId;
	РезультатВыполнения.ИдентификаторТерминала = TerminalId;
	РезультатВыполнения.ИдентификаторТСП = MerchantId;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция НачатьПроверкаОплатыQR(Параметры)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Начало проверки оплаты.");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		Если НЕ Подключить(Неопределено) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Не удалось выполнить подключение.");
			Возврат РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПроверки = Параметры;
	Если СтрСравнить(ПараметрыПроверки.МетодОплаты, "DQR") = 0 Тогда
		// Ветка проверки оплаты по динамическому QR
		РезультатПроверкаОплатыDQR = ПроверкаОплатыDQR(ПараметрыПроверки);
		ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПроверкаОплатыDQR, , "Комментарий");
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатПроверкаОплатыDQR.Комментарий);
	ИначеЕсли СтрСравнить(ПараметрыПроверки.МетодОплаты, "КПС") = 0 Тогда
		// Ветка проверки оплаты по кассовой платежной ссылке
		РезультатПроверкаОплатыКПС = ПроверкаОплатыКПС(ПараметрыПроверки);
		ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПроверкаОплатыКПС, , "Комментарий");
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатПроверкаОплатыКПС.Комментарий);
	Иначе
		// Неизвестный метод оплаты
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Не известный метод оплаты.");
	КонецЕсли;
	
	Попытка
		ВыполнитьЗаписьРезультатаОплатыВоВременныйФайл(РезультатВыполнения);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПроверкаОплатыКПС(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Проверка оплаты по кассовой ссылке.");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	ActivationSourceId = Параметры.ИдентификаторОперацииАктивации; // Уникальный идентификатор операции активации КПС
	TerminalId = Параметры.ИдентификаторТерминала; // Идентификатор кассового рабочего места (терминала)
	MerchantId = Параметры.ИдентификаторТСП; // Идентификатор ТСП
	ИнтервалОжиданияОплаты = Параметры.ИнтервалОжиданияОплаты;
	АдресРесурсаПроверкиСтатусаОперации = Параметры.АдресРесурсаПроверкиСтатусаОперации;
	РегистрационныйНомерЮЛ = Параметры.РегистрационныйНомерЮЛ;
	
	// Наименованиея ключей структуру чувствительны к регистру
	// (регистр наименований должны строго соответствовать документации )
	СтруктураТелоЗапроса = Новый Структура;
	СтруктураТелоЗапроса.Вставить("activationSourceId", ActivationSourceId);
	СтруктураТелоЗапроса.Вставить("terminalId", TerminalId);
	СтруктураТелоЗапроса.Вставить("merchantId", MerchantId);
	
	РезультатПИК = Новый Структура;
	ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
	JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
	Если НЕ РезультатПИК.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатПИК.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	СтрокаТелоЗапроса = СтрЗаменить(СтрЗаменить(РезультатПИК.JsonТекст, Символы.ПС, ""), " ", "");
	
	// Выполняем запрос на формирование на получение статуса по операции
	// выполнем в цикле до момента получения определенного статуса или окончания интервала ожидания оплаты
	// или при достиженеи таймаута ожидания ответа
	ИнтервалПаузы = 3;
	Ожидание = 0;
	Пока Ожидание < ИнтервалОжиданияОплаты Цикл
		ТекстУведомления = СтрШаблон(
				"Таймаут ожидания: %1 из %2 сек.", Строка(Ожидание), Строка(ИнтервалОжиданияОплаты));
		#Если Клиент Тогда
		Состояние("Проверка оплаты по кассовой ссылки СБП. " + ТекстУведомления);
		ОбработкаПрерыванияПользователя();
		#Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстУведомления);
		#КонецЕсли
		
		Ожидание = Ожидание + ИнтервалПаузы;
		Пауза(ИнтервалПаузы);
		
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаПроверкиСтатусаОперации);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Проверка оплаты по кассовой ссылки СБП");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		РезультатВыполнения.ОтветБанка = СтруктураОтветСервера;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code") Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураОтветСервера.code = "-1" Тогда
			// В случае получения кода ошибки «-1», необходимо повторить запрос.
			// Не смотряна описание о некорректных параетрах,
			// данный код -1 может генерироваться при ситуации когда клиент еще не начал оплату,
			// при этом с переданными параметрами все ок.
			Продолжить;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("data")
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("status")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.status) Тогда
			Продолжить;
		КонецЕсли;
		КодСтатусаОперации = СтруктураОтветСервера.data.status;
		ОписаниеКодаСтатусаОперации = ПолучитьОписаниеКодаСтатуса(КодСтатусаОперации);
		Если СтрСравнить(КодСтатусаОперации, "DECLINED") = 0 Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, Строка(ОписаниеКодаСтатусаОперации));
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат РезультатВыполнения;
		ИначеЕсли СтрСравнить(КодСтатусаОперации, "ACCEPTED") = 0 Тогда
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Операция успешно выполнена");
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат РезультатВыполнения;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
			РезультатВыполнения.Комментарий, "Ошибка выполнения: Истек интервал ожидания оплаты.");
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПроверкаОплатыDQR(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Проверка оплаты по динамической ссылке.");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	SourceId = Параметры.ИдентификаторОперации; // Уникальный идентификатор операции
	OperationId = Параметры.ИдентификаторОперрацииБанка; // Уникальный идентификатор оперрации в системе Банка
	QrcId = Параметры.ИдентификаторQR; // Идентификатор QR по которомунужно получить статус
	ИнтервалОжиданияОплаты = Параметры.ИнтервалОжиданияОплаты;
	АдресРесурсаПроверкиСтатусаОперации = Параметры.АдресРесурсаПроверкиСтатусаОперации;
	РегистрационныйНомерЮЛ = Параметры.РегистрационныйНомерЮЛ;
	
	// Наименованиея ключей структуру чувствительны к регистру
	// (регистр наименований должны строго соответствовать документации )
	СтруктураТелоЗапроса = Новый Структура;
	СтруктураТелоЗапроса.Вставить("sourceId", SourceId);
	СтруктураТелоЗапроса.Вставить("operationId", OperationId);
	СтруктураТелоЗапроса.Вставить("qrcId", QrcId);
	
	РезультатПИК = Новый Структура;
	ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
	JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
	Если НЕ РезультатПИК.Результат Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, РезультатПИК.Комментарий);
		Возврат РезультатВыполнения;
	КонецЕсли;
	СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
	
	// Выполняем запрос на формирование на получение статуса по операции
	// выполнем в цикле до момента получения определенного статуса или окончания интервала ожидания оплаты
	// или при достиженеи таймаута ожидания ответа
	ИнтервалПаузы = 3;
	Ожидание = 0;
	Пока Ожидание < ИнтервалОжиданияОплаты Цикл
		ТекстУведомления = СтрШаблон(
				"Таймаут ожидания: %1 из %2 сек.", Строка(Ожидание), Строка(ИнтервалОжиданияОплаты));
		#Если Клиент Тогда
		Состояние("Проверка оплаты СБП. " + ТекстУведомления);
		ОбработкаПрерыванияПользователя();
		#Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстУведомления);
		#КонецЕсли
		
		Ожидание = Ожидание + ИнтервалПаузы;
		Пауза(ИнтервалПаузы);
		
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаПроверкиСтатусаОперации);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Проверка оплаты динамическим кодом СБП");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		РезультатВыполнения.ОтветБанка = СтруктураОтветСервера;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code") ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураОтветСервера.code = "-6" Тогда
			// В случае получения кода ошибки «-6», необходимо повторить запрос.
			Продолжить;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("data")
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("status")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.status) Тогда
			Продолжить;
		КонецЕсли;
		КодСтатусаОперации = СтруктураОтветСервера.data.status;
		ОписаниеКодаСтатусаОперации = ПолучитьОписаниеКодаСтатуса(КодСтатусаОперации);
		Если СтруктураОтветСервера.code = "0"
			И (СтрСравнить(КодСтатусаОперации, "NOT_STARTED") = 0
				ИЛИ СтрСравнить(КодСтатусаОперации, "RECEIVED_OPKC") = 0) Тогда
			// Запрос статуса следует повторять при получении кода «0», в случае если в ответе
			// предоставляются следующие данные: «NOT_STARTED», «RECEIVED_OPKC».
			Продолжить;
		КонецЕсли;
		Если СтрСравнить(КодСтатусаОперации, "EXPIRED") = 0
			ИЛИ СтрСравнить(КодСтатусаОперации, "DECLINED") = 0 Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, Строка(ОписаниеКодаСтатусаОперации));
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат РезультатВыполнения;
		ИначеЕсли СтрСравнить(КодСтатусаОперации, "ACCEPTED") = 0 Тогда
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Операция успешно выполнена");
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат РезультатВыполнения;
		Иначе
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 (%3)",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения. Неизвестный код статуса операции", Строка(КодСтатусаОперации));
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат РезультатВыполнения;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
			РезультатВыполнения.Комментарий, "Ошибка выполнения: Истек интервал ожидания оплаты.");
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ВозвратОплаты

Процедура ВыполнитьВозврат(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Возврат СБП. Ошибка выполнения");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	ВариантМетодаВозврата = Параметры.ВариантМетодаВозврата;
	ИдентификаторОперацииОплатыОснования = Параметры.ИдентификаторОперацииОплатыОснования;
	ИдентификаторОперацииСБП = Параметры.ИдентификаторОперацииСБП;
	РегистрационныйНомерЮЛ = Параметры.РегистрационныйНомерЮЛ;
	АдресРесурсаЗапросаВозврата = Параметры.АдресРесурсаЗапросаВозврата;
	АдресРесурсаЗапросаПроверкиВозврата = Параметры.АдресРесурсаЗапросаПроверкиВозврата;
	ИдентификаторТСП = Параметры.ИдентификаторТСП;
	КлючШифрованияДанных = Параметры.КлючШифрованияДанных;
	OpenSSL = Параметры.OpenSSL;
	Сумма = Параметры.Сумма;
	ВалютаОперации = Параметры.ВалютаОперации;
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			РезультатВыполнения.Комментарий = "Ошибка соединения с процессингом банка";
			Возврат;
		КонецЕсли;
		#Иначе
		РезультатВыполнения.Комментарий = "";
		Возврат;
		#КонецЕсли
	КонецЕсли;
	
	// //////////////////////////// Запрос на выполнение операции возврата
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	ОписаниеКодаОтвета = "";
	ФлагПолучитьСтатусВозврата = Ложь;
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	ИнтервалПаузы = 3;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(СтрШаблон("СБП. Запрос на возврат. Попытка: %1", Строка(ПопыткаЗапроса)), , ,
			Новый Картинка(ЭтотОбъект.ПолучитьМакет("ЛоготипСБП2")));
		#КонецЕсли
		
		Пауза(ИнтервалПаузы);
		
		SourceId = УникальныйИдентификаторОперации; // Уникальный идентификатор операции
		// Уникальный идентификатор операции на основание которой делается возврат
		OriginalIdorActivationSourceld = ИдентификаторОперацииОплатыОснования;
		// Идентификатор устройства
		MerchantId = СокрЛП(ИдентификаторТСП); // Идентификатор ТСП
		TerminalId = Лев(СтрЗаменить(Строка(ПараметрыСеанса.РабочееМестоКлиента.Код), "-", ""), 12);
		// Уникальный идентификатор операции ОПКЦ СБП (получен ранее в поле trxId в ответе)
		FpsRequestId = ИдентификаторОперацииСБП;
		Amount = Число(Сумма) * 100; // Сумма в минимальных единицах валюты (копейки)
		Currency = ВалютаОперации; // Валюта операции
		RefundPurpose = "Возврат от покупателя"; // Причина возврата
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		// Последовательность параметров строго регламентирована, несоблюденеие веден к ошибки при проверки ЭЦП сервером банка
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", SourceId);
		Если ВариантМетодаВозврата = "ПоИдентификаторуФормированияСсылки" Тогда
			СтруктураТелоЗапроса.Вставить("originalId", OriginalIdorActivationSourceld);
		ИначеЕсли ВариантМетодаВозврата = "ПоИдентификаторуАктивацииКПС" Тогда
			СтруктураТелоЗапроса.Вставить("activationSourceId", OriginalIdorActivationSourceld);
		Иначе
			РезультатВыполнения.Комментарий = СтрШаблон(
					"Возврат СБП. Ошибка выполнения: Неизвестный вариант вызова метода возврата (%1)", Строка(ВариантМетодаВозврата));
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(FpsRequestId)
			И ВариантМетодаВозврата = "ПоИдентификаторуФормированияСсылки" Тогда
			// Поле обязательно для возвратов покупок по кассовой платежной ссылке
			// может быть не заполнено при возвратах по старым оплатам
			СтруктураТелоЗапроса.Вставить("fpsRequestId", FpsRequestId);
		КонецЕсли;
		СтруктураТелоЗапроса.Вставить("amount", Amount);
		СтруктураТелоЗапроса.Вставить("currency", Currency);
		СтруктураТелоЗапроса.Вставить("refundPurpose", RefundPurpose);
		СтруктураТелоЗапроса.Вставить("terminalId", TerminalId);
		СтруктураТелоЗапроса.Вставить("merchantId", MerchantId);
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("Возврат СБП. Ошибка выполнения: %1", РезультатПИК.Комментарий);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Шифруем блок данных
		СтрокаТелоЗапроса =
			СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаТелоЗапроса, " ", ""), Символы.ПС, ""), Символы.Таб, "");
		РезультатШБД = Новый Структура;
		ПараметрыШБД = Новый Структура(
				"ДанныеШифрования, OpenSSL, КлючШифрования", СтрокаТелоЗапроса, OpenSSL, КлючШифрованияДанных);
		ШифроватьБлокДанных(РезультатШБД, ПараметрыШБД);
		Если НЕ РезультатШБД.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("Возврат СБП. Ошибка выполнения: %1", РезультатШБД.Комментарий);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		ШифрованноеТелоЗапроса = РезультатШБД.ДанныеХэш64;
		
		// Добавим шифрованный блок данных к изначальным данным запроса
		СтруктураТелоЗапроса.Вставить(
			"msgSign", СтрЗаменить(СтрЗаменить(ШифрованноеТелоЗапроса, Символы.ВК, ""), Символы.ПС, ""));
		
		// Еще раз формируем из данных строку Json содержащуу поле с шифрованными данными
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("Возврат СБП. Ошибка выполнения: %1", РезультатПИК.Комментарий);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		СтрокаТелоЗапроса =
			СтрЗаменить(СтрЗаменить(СтрЗаменить(РезультатПИК.JsonТекст, " ", ""), Символы.ПС, ""), Символы.Таб, "");
		
		// Выполняем запрос на возврат
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаЗапросаВозврата);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Возврат СБП");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		РезультатВыполнения.ОтветБанка = СтруктураОтветСервера;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			РезультатВыполнения.Комментарий =
				"Возврат СБП. Ошибка выполнения: В ответе отсутствуют ожидаемые поля 'code' или 'message'";
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		Если СтруктураОтветСервера.code = "0" Тогда
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Комментарий = "Возврат СБП. Операция успешно выполнена";
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		ИначеЕсли СтруктураОтветСервера.code = "1"
			И СтруктураОтветСервера.Свойство("sourceId") Тогда
			// Обработка операции возврата - в процессе, на стороне СБП,
			// необходимо вызвать метод getRefundStatus для получения текущего статуса операции
			ФлагПолучитьСтатусВозврата = Истина;
			Прервать;
		ИначеЕсли СтруктураОтветСервера.code = "-5" Тогда
			// Нарушена уникальность sourceId, сформируйте новый запрос
			УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
			Продолжить;
		Иначе
			РезультатВыполнения.Комментарий = СтрШаблон("Возврат СБП. Ошибка выполнения: %1 (%2: %3)",
					Строка(СтруктураОтветСервера.message), Строка(СтруктураОтветСервера.code), ОписаниеКодаОтвета);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
	// Мы попадаем на это условие только в случае если истекли попытки удачно завершить операцию возврата
	// или получили от сервера команду на проверку статуса возврата с помощью отдельного метода.
	Если ФлагПолучитьСтатусВозврата Тогда
		РезультатПВ = Новый Структура;
		ПараметрыПВ = Новый Структура();
		ПараметрыПВ.Вставить("УникальныйИдентификаторОперации", СтруктураОтветСервера.sourceId);
		ПараметрыПВ.Вставить("ИдентификаторОперацииОплатыОснования", OriginalIdorActivationSourceld);
		ПараметрыПВ.Вставить("ИдентификаторОперацииВозврата", "");
		ПараметрыПВ.Вставить("АдресРесурсаЗапросаПроверкиВозврата", АдресРесурсаЗапросаПроверкиВозврата);
		ПараметрыПВ.Вставить("РегистрационныйНомерЮЛ", РегистрационныйНомерЮЛ);
		ПроверкаВозврата(РезультатПВ, ПараметрыПВ);
		ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПВ);
		Возврат;
	Иначе;
		// Все попытки выполнения возврата не увенчались успехом
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон("Возврат СБП. Ошибка выполнения: Неудачные попытки выполнить возврат. %1", ОписаниеКодаОтвета);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаВозврата(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Проверка возврата СБП. Ошибка выполнения");
	РезультатВыполнения.Вставить("ОтветБанка", Неопределено);
	
	ИдентификаторОперацииОплатыОснования = Параметры.ИдентификаторОперацииОплатыОснования;
	ИдентификаторОперацииВозврата = Параметры.ИдентификаторОперацииВозврата;
	АдресРесурсаЗапросаПроверкиВозврата = Параметры.АдресРесурсаЗапросаПроверкиВозврата;
	РегистрационныйНомерЮЛ = Параметры.РегистрационныйНомерЮЛ;
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			РезультатВыполнения.Комментарий = "Ошибка соединения с процессингом банка";
			Возврат;
		КонецЕсли;
		#Иначе
		РезультатВыполнения.Комментарий = "";
		Возврат;
		#КонецЕсли
	КонецЕсли;
	
	// //////////////////////////// Запрос на выполнение операции проверки статуса возврата
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	ИнтервалПаузы = 3;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(СтрШаблон("СБП. Запрос проверки статуса возврата. Попытка: %1", Строка(ПопыткаЗапроса)), , ,
			Новый Картинка(ЭтотОбъект.ПолучитьМакет("ЛоготипСБП2")));
		#КонецЕсли
		Пауза(ИнтервалПаузы);
		
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", УникальныйИдентификаторОперации);
		СтруктураТелоЗапроса.Вставить("originalId", ИдентификаторОперацииОплатыОснования);
		Если ЗначениеЗаполнено(ИдентификаторОперацииВозврата) Тогда
			СтруктураТелоЗапроса.Вставить("refundId", ИдентификаторОперацииВозврата);
		КонецЕсли;
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон("Проверка возврата СБП. Ошибка выполнения: %1", РезультатПИК.Комментарий);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос проверки проведения возврата
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаЗапросаПроверкиВозврата);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Проверка возврата СБП");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		РезультатВыполнения.ОтветБанка = СтруктураОтветСервера;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			РезультатВыполнения.Комментарий =
				"Возврат СБП. Ошибка выполнения: В ответе отсутствуют ожидаемые поля 'code' или 'message'";
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		Если СтруктураОтветСервера.code = "0" Тогда
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Комментарий = "Возврат СБП. Операция успешно выполнена";
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		ИначеЕсли СтруктураОтветСервера.code = "1" Тогда
			Продолжить;
		Иначе
			РезультатВыполнения.Комментарий = СтрШаблон("Возврат СБП. Ошибка выполнения: %1 (%2: %3)",
					Строка(СтруктураОтветСервера.message), Строка(СтруктураОтветСервера.code), ОписаниеКодаОтвета);
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			Возврат;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область КассоваяПлатежнаяСсылка

Процедура ПолучитьИдентификаторыКассовыхПлатежныхСсылок(
		РезультатВыполнения = Неопределено, Параметры = Неопределено)
	// Метод позволяет сгенерировать заданное количество идентификаторов
	// для многоразовых Платежных ссылок СБП с целью дальнейшего
	// их использования при регистрации Кассовых ссылок СБП.
	
	КодОперации = 23;
	УстановитьОшибку(КодОперации, Истина);
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Получение идентификаторов кассовых платежных ссылок. %1");
	РезультатВыполнения.Вставить("КоллекцияДанныхКПС", Неопределено);
	
	КоличествоИдентификаторовКПС = 1;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("КоличествоИдентификаторовКПС") Тогда
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		КоличествоИдентификаторовКПС =
			Окр(ОписаниеТипаЧисло.ПривестиЗначение(Параметры.КоличествоИдентификаторовКПС), 0, РежимОкругления.Окр15как20);
	КонецЕсли;
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка соединения с процессингом банка");
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: Ошибка соединения с процессингом банка");
			Возврат;
		КонецЕсли;
		#Иначе
		УстановитьОшибку(КодОперации, Ложь, "");
		РезультатВыполнения.Комментарий = "";
		Возврат;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	ПроцессингАдресРесурсаГенерацииИдентификаторовКПС = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаГенерацииИдентификаторовКПС") Тогда
		ПроцессингАдресРесурсаГенерацииИдентификаторовКПС =
			ПараметрыДрайвера.ПроцессингАдресРесурсаГенерацииИдентификаторовКПС;
	КонецЕсли;
	Если ПустаяСтрока(ПроцессингАдресРесурсаГенерацииИдентификаторовКПС) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес ресурса запроса генерации идентификаторов КПС");
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Отсутствует адрес ресурса запроса генерации идентификаторов КПС");
		Возврат;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует идентификатор ТСП (merchantid)");
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует идентификатор ТСП (merchantid)");
		Возврат;
	КонецЕсли;
	
	РасчетныйСчетЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРасчетныйСчетЮЛ") Тогда
		РасчетныйСчетЮЛ = ПараметрыДрайвера.БанкРасчетныйСчетЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РасчетныйСчетЮЛ) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует расчетный счет ЮЛ (account)");
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует расчетный счет ЮЛ (account)");
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует регистрационный номер ЮЛ (UserLogin)");
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует регистрационный номер ЮЛ (UserLogin)");
		Возврат;
	КонецЕсли;
	
	// ///////////////////// Запрос формирования запрашиваемого количества идентификаторов платежных ссылок на процессинге
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	Успех = Ложь;
	ИнтервалПаузы = 3;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(СтрШаблон(
				"СБП. Запрос формирования идентификаторов кассовых платежных ссылок СБП. Попытка: %1", Строка(ПопыткаЗапроса)), , ,
			Новый Картинка(ЭтотОбъект.ПолучитьМакет("ЛоготипСБП2")));
		#КонецЕсли
		Пауза(ИнтервалПаузы);
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		СтруктураТелоЗапроса = Новый Структура;
		// Уникальный идентификатор операции
		СтруктураТелоЗапроса.Вставить("sourceId", ПолучитьУникальныйИдентификаторОперации());
		// Количество идентификаторов для генерации (макс. 10000)
		СтруктураТелоЗапроса.Вставить("quantity", КоличествоИдентификаторовКПС);
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, РезультатПИК.Комментарий);
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка выполнения: %1", РезультатПИК.Комментарий));
			Возврат;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос на формирование QR-кода
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", ПроцессингАдресРесурсаГенерацииИдентификаторовКПС);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования =
			КонструкторПараметровЗаписиЛогирования("Формирования идентификаторов кассовых платежных ссылок");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатВЗ.Комментарий);
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структуру для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code") ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования идентификаторов кассовых платежных ссылок.
				| В ответе отсутствуют ожидаемые поля 'code' или 'message'");
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий,
					"Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'code' или 'message'");
			Возврат;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		Если НЕ СтруктураОтветСервера.code = "0" Тогда
			Если СтруктураОтветСервера.code = "-3" Тогда // При формировании QR кода возникла ошибка, сформируйте новый запрос
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("sourceId")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("operationId") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования идентификаторов кассовых платежных ссылок.
				| В ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId'");
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий,
					"Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId'");
			Возврат;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("data")
			ИЛИ НЕ ТипЗнч(СтруктураОтветСервера.data) = Тип("Массив")
			ИЛИ СтруктураОтветСервера.data.Количество() = 0 Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования идентификаторов кассовых платежных ссылок.
				| В ответе отсутствуют ожидаемые поля 'data', 'data.payload', 'data.qrcId', 'data.status'");
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий,
					"Ошибка выполнения: в ответе отсутствует ожидаемый набор данных идентификаторов");
			Возврат;
		КонецЕсли;
		Успех = Истина;
		Прервать;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	Если НЕ Успех Тогда
		УстановитьОшибку(КодОперации, Ложь, СтрШаблон(
				"Процессинг банка. Ошибка формирования идентификаторов кассовых платежных ссылок. %1", ОписаниеКодаОтвета));
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка формирования кассовой платежной ссылки. %1", ОписаниеКодаОтвета));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	РезультатВыполнения.КоллекцияДанныхКПС = СтруктураОтветСервера.data;
	
КонецПроцедуры

Процедура СоздатьКассовуюПлатежнуюСсылку(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	КодОперации = 21;
	УстановитьОшибку(КодОперации, Истина);
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Создание кассовой платежной ссылки. Ошибка выполнения");
	РезультатВыполнения.Вставить("КассоваяПлатежнаяСсылка", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторОперацииТСП", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторОперацииБанка", Неопределено);
	РезультатВыполнения.Вставить("ИдентификаторКассовойСсылки", Неопределено);
	
	ИдентификаторКПС = Неопределено;
	ВывестиРезультатНаФорму = Истина;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры.Свойство("ИдентификаторКПС", ИдентификаторКПС);
		Параметры.Свойство("ВывестиРезультатНаФорму", ВывестиРезультатНаФорму);
	КонецЕсли;
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			УстановитьОшибку(КодОперации, Ложь, "Ошибка соединения с процессингом банка");
			РезультатВыполнения.Комментарий =
				"Создание кассовой платежной ссылки. Ошибка выполнения: Ошибка соединения с процессингом банка";
			Возврат;
		КонецЕсли;
		#Иначе
		УстановитьОшибку(КодОперации, Ложь, "");
		РезультатВыполнения.Комментарий = "";
		Возврат;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	ПроцессингАдресРесурсаСозданияКассовойСсылки = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаСозданияКассовойСсылки") Тогда
		ПроцессингАдресРесурсаСозданияКассовойСсылки = ПараметрыДрайвера.ПроцессингАдресРесурсаСозданияКассовойСсылки;
	КонецЕсли;
	Если ПустаяСтрока(ПроцессингАдресРесурсаСозданияКассовойСсылки) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует адрес ресурса запроса создания кассовой ссылки");
		РезультатВыполнения.Комментарий =
			"Создание кассовой платежной ссылки. Ошибка выполнения: Отсутствует адрес ресурса запроса создания кассовой ссылки";
		Возврат;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует идентификатор ТСП (merchantid)");
		РезультатВыполнения.Комментарий =
			"Создание кассовой платежной ссылки. Ошибка выполнения: Отсутствует идентификатор ТСП (merchantid)";
		Возврат;
	КонецЕсли;
	
	РасчетныйСчетЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРасчетныйСчетЮЛ") Тогда
		РасчетныйСчетЮЛ = ПараметрыДрайвера.БанкРасчетныйСчетЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РасчетныйСчетЮЛ) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует расчетный счет ЮЛ (account)");
		РезультатВыполнения.Комментарий =
			"Создание кассовой платежной ссылки. Ошибка выполнения: Отсутствует расчетный счет ЮЛ (account)";
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		УстановитьОшибку(КодОперации, Ложь, "Отсутствует регистрационный номер ЮЛ (UserLogin)");
		РезультатВыполнения.Комментарий =
			"Создание кассовой платежной ссылки. Ошибка выполнения: Отсутствует регистрационный номер ЮЛ (UserLogin)";
		Возврат;
	КонецЕсли;
	
	// //////////////////////////// Запрос формирования кассовой платежной ссылки на процессинге
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	Успех = Ложь;
	ИнтервалПаузы = 3;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(
			СтрШаблон("СБП. Запрос формирования кассовой платежной ссылки СБП. Попытка: %1", Строка(ПопыткаЗапроса)), , ,
			Новый Картинка(ЭтотОбъект.ПолучитьМакет("ЛоготипСБП2")));
		#КонецЕсли
		
		Пауза(ИнтервалПаузы);
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", УникальныйИдентификаторОперации); // Уникальный идентификатор операции
		СтруктураТелоЗапроса.Вставить("terminalId",
			Лев(СтрЗаменить(Строка(ПараметрыСеанса.РабочееМестоКлиента.Код), "-", ""), 12)); // Идентификатор устройства
		СтруктураТелоЗапроса.Вставить("merchantId", СокрЛП(ИдентификаторТСП)); // Идентификатор ТСП
		СтруктураТелоЗапроса.Вставить("account", СокрЛП(РасчетныйСчетЮЛ)); // Счет юр.лица
		СтруктураТелоЗапроса.Вставить("redirectUrl", "https://lekopttorg.ru/");
		Если ЗначениеЗаполнено(ИдентификаторКПС) Тогда
			// Идентификатор QR кода,
			// полученный в запросе «Получение идентификаторов для Кассовых ссылок СБП», метод qrcIdReservation.
			СтруктураТелоЗапроса.Вставить("qrcId", Строка(ИдентификаторКПС));
		КонецЕсли;
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, РезультатПИК.Комментарий);
			РезультатВыполнения.Комментарий =
				СтрШаблон("Создание кассовой платежной ссылки. Ошибка выполнения: %1", РезультатПИК.Комментарий);
			Возврат;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос на формирование QR-кода
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", ПроцессингАдресРесурсаСозданияКассовойСсылки);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Создание кассовой платежной ссылки");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			УстановитьОшибку(КодОперации, Ложь, РезультатВЗ.Комментарий);
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структуру для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования кассовой платежной ссылки.
				| В ответе отсутствуют ожидаемые поля 'code' или 'message'");
			РезультатВыполнения.Комментарий =
				"Создание кассовой платежной ссылки. Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'code' или 'message'";
			Возврат;
		КонецЕсли;
		ОписаниеКодаОтвета = ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		Если НЕ СтруктураОтветСервера.code = "0" Тогда
			МассивКодыОшибокПовторнаяПопытка = Новый Массив;
			МассивКодыОшибокПовторнаяПопытка.Добавить("-5");
			Если МассивКодыОшибокПовторнаяПопытка.Найти(СтруктураОтветСервера.code) = Неопределено Тогда
				РезультатВыполнения.Комментарий =
					СтрШаблон("%1 %2", РезультатВыполнения.Комментарий, СтруктураОтветСервера.message);
				Прервать;
			КонецЕсли;
			УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
			Продолжить;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("sourceId")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("operationId") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования кассовой платежной ссылки.
				| В ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId'");
			РезультатВыполнения.Комментарий = "Создание кассовой платежной ссылки.
				| Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'sourceId' или 'operationId'";
			Возврат;
		КонецЕсли;
		Если НЕ СтруктураОтветСервера.Свойство("data")
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("payload")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.payload)
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("qrcId")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураОтветСервера.data.qrcId)
			ИЛИ НЕ СтруктураОтветСервера.data.Свойство("status")
			ИЛИ НЕ СтрСравнить(СтруктураОтветСервера.data.status, "created") = 0 Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			УстановитьОшибку(КодОперации, Ложь, "Процессинг банка. Ошибка формирования кассовой платежной ссылки.
				| В ответе отсутствуют ожидаемые поля 'data', 'data.payload', 'data.qrcId', 'data.status'");
			РезультатВыполнения.Комментарий = "Создание кассовой платежной ссылки.
				| Ошибка выполнения: в ответе отсутствуют ожидаемые поля 'data', 'data.payload', 'data.qrcId', 'data.status'";
			Возврат;
		КонецЕсли;
		Успех = Истина;
		Прервать;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	Если НЕ Успех Тогда
		УстановитьОшибку(КодОперации, Ложь,
			СтрШаблон("Процессинг банка. Ошибка формирования кассовой платежной ссылки. %1", ОписаниеКодаОтвета));
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон(
					"Создание кассовой платежной ссылки. Ошибка формирования кассовой платежной ссылки. %1", ОписаниеКодаОтвета);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИдентификаторОперацииТСП = СтруктураОтветСервера.sourceId;
	ИдентификаторОперацииБанка = СтруктураОтветСервера.operationId;
	ИдентификаторКассовойСсылки = СтруктураОтветСервера.data.qrcId;
	КассоваяПлатежнаяСсылка = СтруктураОтветСервера.data.payload;
	
	Если ВывестиРезультатНаФорму Тогда
		// Откроем форму где покажем непосредственно QR-код платежной ссылки и саму ссылку
		ФормаКассоваяПлатежнаяСсылка = ЭтотОбъект.ПолучитьФорму("КассоваяПлатежнаяСсылка"); // BSLLS:GetFormMethod-off
		ФормаКассоваяПлатежнаяСсылка.КассоваяПлатежнаяСсылка = КассоваяПлатежнаяСсылка;
		ФормаКассоваяПлатежнаяСсылка.ИдентификаторКассовойСсылки = ИдентификаторКассовойСсылки;
		ФормаКассоваяПлатежнаяСсылка.ИдентификаторОперацииТСП = ИдентификаторОперацииТСП;
		ФормаКассоваяПлатежнаяСсылка.ИдентификаторТСПКПС =
			СтрШаблон("%1>%2", ИдентификаторОперацииТСП, КассоваяПлатежнаяСсылка);
		ФормаКассоваяПлатежнаяСсылка.ОткрытьМодально();
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = "Создание кассовой платежной ссылки. Операция выполнена";
	РезультатВыполнения.ИдентификаторОперацииТСП = ИдентификаторОперацииТСП;
	РезультатВыполнения.ИдентификаторОперацииБанка = ИдентификаторОперацииБанка;
	РезультатВыполнения.ИдентификаторКассовойСсылки = ИдентификаторКассовойСсылки;
	РезультатВыполнения.КассоваяПлатежнаяСсылка = КассоваяПлатежнаяСсылка;
	
КонецПроцедуры

Функция ДеактивацияКассовойПлатежнойСсылки(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Деактивация кассовой ссылки.");
	РезультатВыполнения.Вставить("ДанныеОперации", Неопределено);
	
	// Проверим соединение с банком, если соединение неопределено, то пробуем создать соединение
	Если НЕ ТипЗнч(ЭтотОбъект.HTTPСоединение) = Тип("HTTPСоединение") Тогда
		#Если Клиент Тогда
		ИДУстройства = Неопределено;
		Если НЕ Подключить(ИДУстройства) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Ошибка соединения с процессингом банка");
			Возврат РезультатВыполнения;
		КонецЕсли;
		#Иначе
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка соединения с процессингом банка");
		Возврат РезультатВыполнения;
		#КонецЕсли
	КонецЕсли;
	
	// Проверим заполнение обязательных параметров
	АдресРесурсаДеактивацияКПС = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингАдресРесурсаДеактивацииКассовойСсылки") Тогда
		АдресРесурсаДеактивацияКПС = ПараметрыДрайвера.ПроцессингАдресРесурсаДеактивацииКассовойСсылки;
	КонецЕсли;
	Если ПустаяСтрока(АдресРесурсаДеактивацияКПС) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий,
				"Ошибка выполнения: Отсутствует адрес ресурса запроса деактивации кассовой ссылки");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	КассоваяПлатежнаяСсылка = "";
	ИдентификаторКассовойСсылки = "";
	Если ПараметрыДрайвера.Свойство("ПроцессингКассоваяПлатежнаяСсылка") Тогда
		Коллекция = СтрРазделить(СокрЛП(ПараметрыДрайвера.ПроцессингКассоваяПлатежнаяСсылка), ">", Ложь);
		КассоваяПлатежнаяСсылка = Коллекция.Получить(Коллекция.ВГраница());
	КонецЕсли;
	Если ЗначениеЗаполнено(КассоваяПлатежнаяСсылка) Тогда
		ИдентификаторКассовойСсылки = ПолучитьИдентификаторКассовойСсылки(КассоваяПлатежнаяСсылка);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КассоваяПлатежнаяСсылка)
		ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторКассовойСсылки) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует кассовая платежная ссылка или ее идентификатор");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторТСП = "";
	Если ПараметрыДрайвера.Свойство("БанкИдентификаторТСП") Тогда
		ИдентификаторТСП = ПараметрыДрайвера.БанкИдентификаторТСП;
	КонецЕсли;
	Если ПустаяСтрока(ИдентификаторТСП) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует идентификатор ТСП (merchantid)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РегистрационныйНомерЮЛ = "";
	Если ПараметрыДрайвера.Свойство("БанкРегистрационныйНомерЮЛ") Тогда
		РегистрационныйНомерЮЛ = ПараметрыДрайвера.БанкРегистрационныйНомерЮЛ;
	КонецЕсли;
	Если ПустаяСтрока(РегистрационныйНомерЮЛ) Тогда
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
				РезультатВыполнения.Комментарий, "Ошибка выполнения: Отсутствует регистрационный номер ЮЛ (UserLogin)");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИсточникВыводаQR = Неопределено;
	Если ПараметрыДрайвера.Свойство("ИсточникВыводаQR") Тогда
		ИсточникВыводаQR = ПараметрыДрайвера.ИсточникВыводаQR;
	КонецЕсли;
	
	ДисплейПорт = "";
	Если ПараметрыДрайвера.Свойство("ДисплейПорт") Тогда
		ДисплейПорт = ПараметрыДрайвера.ДисплейПорт;
	КонецЕсли;
	
	// //////////////////////////// Запрос формирования QR-кода на процессинге
	// Заполним данные для формирования тела запроса, после формируем само тело в формате json
	// Выполняем в цикле, при некоторых кодах ответа повторяем запрос
	УникальныйИдентификаторОперации = ПолучитьУникальныйИдентификаторОперации();
	ИнтервалПаузы = 3;
	ФлагОперацияВыполнена = Ложь;
	Для ПопыткаЗапроса = 1 По 5 Цикл
		#Если Клиент Тогда
		Состояние(СтрШаблон("СБП. Запрос деактивации платежной ссылки. Попытка: %1", Строка(ПопыткаЗапроса)));
		#КонецЕсли
		
		SourceId = УникальныйИдентификаторОперации; // Уникальный идентификатор операции
		// Идентификатор устройства
		TerminalId = Лев(СтрЗаменить(Строка(ПараметрыСеанса.РабочееМестоКлиента.Код), "-", ""), 12);
		MerchantId = СокрЛП(ИдентификаторТСП); // Идентификатор ТСП
		QrcId = СокрЛП(ИдентификаторКассовойСсылки); // Идентификатор зарегистрированной Кассовой ссылки СБП
		
		// Наименованиея ключей структуру чувствительны к регистру
		// (регистр наименований должны строго соответствовать документации )
		СтруктураТелоЗапроса = Новый Структура;
		СтруктураТелоЗапроса.Вставить("sourceId", SourceId);
		СтруктураТелоЗапроса.Вставить("terminalId", TerminalId);
		СтруктураТелоЗапроса.Вставить("merchantId", MerchantId);
		СтруктураТелоЗапроса.Вставить("qrcId", QrcId);
		
		РезультатПИК = Новый Структура;
		ПараметрыПИК = Новый Структура("КоллекцияПреобразования", СтруктураТелоЗапроса);
		JSONПреобразоватьИзКоллекции(РезультатПИК, ПараметрыПИК);
		Если НЕ РезультатПИК.Результат Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
					РезультатВыполнения.Комментарий, "Ошибка выполнения:", РезультатПИК.Комментарий);
			Возврат РезультатВыполнения;
		КонецЕсли;
		СтрокаТелоЗапроса = РезультатПИК.JsonТекст;
		
		// Выполняем запрос на формирование QR-кода
		РезультатВЗ = Новый Структура;
		ПараметрыВЗ = Новый Структура;
		ПараметрыВЗ.Вставить("МеханизмЗапроса", "1С");
		ПараметрыВЗ.Вставить("HTTPСоединение", ЭтотОбъект.HTTPСоединение);
		ПараметрыВЗ.Вставить("АдресРесурса", АдресРесурсаДеактивацияКПС);
		ПараметрыВЗ.Вставить("Заголовки", Новый Соответствие());
		ПараметрыВЗ.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		ПараметрыВЗ.Заголовки.Вставить("x-User-Login", РегистрационныйНомерЮЛ);
		ПараметрыВЗ.Вставить("ТелоЗапроса", СтрокаТелоЗапроса);
		ПараметрыВЗ.Вставить("ТипКоманды", "POST");
		ВыполнитьЗапросHTTP(РезультатВЗ, ПараметрыВЗ);
		ПараметрыЗаписиЛогирования = КонструкторПараметровЗаписиЛогирования("Деактивация кассовой платежной ссылки");
		ПараметрыЗаписиЛогирования.ВходящиеДанные = ПолучитьКопиюСтруктурыПоИсключаемымКлючам(ПараметрыВЗ, "ТелоЗапроса");
		ПараметрыЗаписиЛогирования.ВходящиеДанные.Вставить("ТелоЗапроса", СтруктураТелоЗапроса);
		ПараметрыЗаписиЛогирования.РезультатВыполнения =
			ПолучитьКопиюСтруктурыПоИсключаемымКлючам(РезультатВЗ, "HTTPОтветСтрокой");
		ВыполнитьЗаписьЛога( , ПараметрыЗаписиЛогирования);
		Если НЕ РезультатВЗ.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтрокаОтвет = РезультатВЗ.HTTPОтветСтрокой;
		
		// преобразуем ответ в структура для более удобного разбора
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", СтрокаОтвет);
		JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
		Если НЕ РезультатПВК.Результат Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		КонецЕсли;
		СтруктураОтветСервера = РезультатПВК.КоллекцияДанных;
		
		// Анализируем ответ
		Если НЕ СтруктураОтветСервера.Свойство("code")
			ИЛИ НЕ СтруктураОтветСервера.Свойство("message") Тогда
			#Если Клиент Тогда
			Состояние("");
			#КонецЕсли
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий,
					"Ошибка выполнения: Процессинг банка.
					|Ошибка формирования QR-кода. В ответе отсутствуют ожидаемые поля 'code' или 'message'");
			Возврат РезультатВыполнения;
		КонецЕсли;
		ОписаниеКодаОтвета =
			ПолучитьОписаниеКодаОтвета(Строка(СтруктураОтветСервера.code), СтруктураОтветСервера.message);
		ОшибкиДляПовторнойПопытки = Новый Массив;
		ОшибкиДляПовторнойПопытки.Добавить("-1"); // Некорректные параметры запроса
		ОшибкиДляПовторнойПопытки.Добавить("-2"); // Внутренняя ошибка системы
		ОшибкиДляПовторнойПопытки.Добавить("-5"); // Нарушена уникальность sourceId, сформируйте новый запрос.
		Если СтруктураОтветСервера.code = "0" Тогда
			ФлагОперацияВыполнена = Истина;
			Прервать;
		ИначеЕсли НЕ ОшибкиДляПовторнойПопытки.Найти(СтруктураОтветСервера.code) = Неопределено Тогда
			Пауза(ИнтервалПаузы);
			Продолжить;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	// Выключим дисплей
	Если ИсточникВыводаQR = 1 Тогда
		ПараметрыВД = КонструкторПараметровВыводНаДисплей(ДисплейПорт, Неопределено, Неопределено, 1);
		РезультатВД = ВыполнитьВыводНаДисплей(ПараметрыВД);
		ВыполнитьЗаписьЛога( , КонструкторПараметровЗаписиЛогирования("Выключение QR-дисплея", ПараметрыВД, РезультатВД));
	КонецЕсли;
	Если НЕ ФлагОперацияВыполнена Тогда
		Если ПустаяСтрока(РезультатВыполнения.Комментарий) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
					РезультатВыполнения.Комментарий, "Ошибка выполнения");
		КонецЕсли;
		РезультатВыполнения.Комментарий = СтрШаблон("%1 %2 %3",
				РезультатВыполнения.Комментарий, "Ошибка выполнения:", ОписаниеКодаОтвета);
		Возврат РезультатВыполнения;
	КонецЕсли;
	//////////////////////////////
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон("%1 %2",
			РезультатВыполнения.Комментарий, "Операция успешно выполнена");
	РезультатВыполнения.ДанныеОперации = СтруктураОтветСервера;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ККМ

Процедура ПодключениеККМ(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Подключение ККМ. %1");
	РезультатВыполнения.Вставить("ККМ", Неопределено);
	
	// Попытка получить внешнюю обработку и ее версию из присоединенного файла
	ОбработчикКомандККМБаза = Неопределено;
	ВерсияБаза = Новый Массив;
	ВерсияБаза.Добавить(0);
	ВерсияБаза.Добавить(0);
	СсылкаПрисоединенныйАльтернативныйОбработчикККМ = ФКНастройки.ПолучитьЗначениеНастройки(
			"АРМ_АльтернативныйОбработчикККМ_Присоединенный", ПараметрыСеанса.РабочееМестоКлиента, Неопределено);
	Если ТипЗнч(СсылкаПрисоединенныйАльтернативныйОбработчикККМ) = Тип("СправочникСсылка.ПрисоединенныеФайлы") Тогда
		#Если Клиент Тогда
		Попытка
			ОбработчикКомандККМБаза =
				ПрисоединенныеФайлыКлиент.ПолучитьОбъектВО(СсылкаПрисоединенныйАльтернативныйОбработчикККМ);
			ВерсияБаза = СтрРазделить(ОбработчикКомандККМБаза.ПолучитьАктуальныеСведенияОПрограмме().Версия, ".");
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Для Инд = 0 По 1 Цикл
				ВерсияБаза[Инд] = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияБаза[Инд]);
			КонецЦикла;
		Исключение
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
		#КонецЕсли
	КонецЕсли;
	// Попытка получить внешнюю обработку и ее версию из каталога ОС
	ОбработчикКомандККМКаталог = Неопределено;
	ВерсияКаталог = Новый Массив;
	ВерсияКаталог.Добавить(0);
	ВерсияКаталог.Добавить(0);
	Попытка
		ПутьАльтернативныйОбработчикККМ = ФКНастройки.ПолучитьЗначениеНастройки(
				"АРМ_АльтернативныйОбработчикККМ", ПараметрыСеанса.РабочееМестоКлиента, "");
		ФайлАльтернативныйОбработчикККМ = Новый Файл(НормализоватьКаталог(ПутьАльтернативныйОбработчикККМ, Истина));
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	Если ФайлАльтернативныйОбработчикККМ.Существует() Тогда
		Попытка
			ОписаниеЗащитыОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
			ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			ОбработчикКомандККМКаталог = ВнешниеОбработки.Создать(
					ФайлАльтернативныйОбработчикККМ.ПолноеИмя, Ложь, ОписаниеЗащитыОтОпасныхДействий);
			ВерсияКаталог = СтрРазделить(ОбработчикКомандККМКаталог.ПолучитьАктуальныеСведенияОПрограмме().Версия, ".");
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Для Инд = 0 По 1 Цикл
				ВерсияКаталог[Инд] = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияКаталог[Инд]);
			КонецЦикла;
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если ОбработчикКомандККМБаза = Неопределено
		И ОбработчикКомандККМКаталог = Неопределено Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: не удалось определить обработчик ККМ");
		Возврат;
	КонецЕсли;
	// Сравним 2 версии альт бработок и пробуем использовать более новую.
	ОбработчикКомандККМ = Неопределено;
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	МажорВерсияБаза = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияБаза[0]);
	МинорВерсияБаза = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияБаза[1]);
	МажорВерсияКаталог = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияКаталог[0]);
	МинорВерсияКаталог = ОписаниеТипаЧисло.ПривестиЗначение(ВерсияКаталог[1]);
	Если МажорВерсияБаза > МажорВерсияКаталог Тогда
		ОбработчикКомандККМ = ОбработчикКомандККМБаза;
	ИначеЕсли МажорВерсияБаза < МажорВерсияКаталог Тогда
		ОбработчикКомандККМ = ОбработчикКомандККМКаталог;
	КонецЕсли;
	Если ОбработчикКомандККМ = Неопределено Тогда
		Если МинорВерсияБаза > МинорВерсияКаталог Тогда
			ОбработчикКомандККМ = ОбработчикКомандККМБаза;
		ИначеЕсли МинорВерсияБаза < МинорВерсияКаталог Тогда
			ОбработчикКомандККМ = ОбработчикКомандККМКаталог;
		КонецЕсли;
	КонецЕсли;
	Если ОбработчикКомандККМ = Неопределено Тогда
		ОбработчикКомандККМ = ОбработчикКомандККМБаза;
	КонецЕсли;
	
	Попытка
		// Блок инициализации и установки параметров драйвера ККМ
		РезультатПО = Новый Структура;
		ОбработчикКомандККМ.ПодключитьОбъектККМ(РезультатПО);
		Если НЕ РезультатПО.Результат Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка выполнения: %1", РезультатПО.Комментарий));
			Возврат;
		КонецЕсли;
		РезультатИП = Новый Структура;
		ОбработчикКомандККМ.ИнициализацияПараметровОбработки(РезультатИП);
		Если НЕ РезультатИП.Результат Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка выполнения: %1", РезультатИП.Комментарий));
			Возврат;
		КонецЕсли;
		РезультатИПККМ = Новый Структура;
		ОбработчикКомандККМ.ИнициализацияПараметровККМ(РезультатИПККМ);
		Если НЕ РезультатИП.Результат Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка выполнения: %1", РезультатИПККМ.Комментарий));
			Возврат;
		КонецЕсли;
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция успешно выполнена");
	РезультатВыполнения.ККМ = ОбработчикКомандККМ;
	
КонецПроцедуры

Функция QRПечатьНаККМ(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Печать QR-кода на ККМ. %1");
	
	Заголовок = Параметры.Заголовок;
	ДанныеКода = Параметры.ДанныеКода;
	ККМ = Параметры.ККМ;
	
	Попытка
		ККМ.ПечатьПустойСтроки();
		ККМ.ПечатьСтроки(Заголовок, Новый Структура("Центрировать", Истина));
		ККМ.ПечатьПустойСтроки();
		
		РезультатПШК = Новый Структура;
		ДанныеКода = Новый Структура("ТипКода, ЗначениеКода", "QR", ДанныеКода);
		ККМ.ПечатьШтрихКода(ДанныеКода, РезультатПШК);
		Если НЕ РезультатПШК.Результат Тогда
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, СтрШаблон("Ошибка выполнения: %1", РезультатПШК.Комментарий));
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		ККМ.ПечатьПустойСтроки( , 7);
		ККМ.ОтрезатьЛенту();
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область КоллекцииДанных

Функция СоздатьМассив(Знач1 = "<n>", Знач2 = "<n>", Знач3 = "<n>",
		Знач4 = "<n>", Знач5 = "<n>", Знач6 = "<n>", Знач7 = "<n>")
	
	Массив = Новый Массив;
	
	Если НЕ Знач1 = "<n>" Тогда
		Массив.Добавить(Знач1);
	КонецЕсли;
	Если НЕ Знач2 = "<n>" Тогда
		Массив.Добавить(Знач2);
	КонецЕсли;
	Если НЕ Знач3 = "<n>" Тогда
		Массив.Добавить(Знач3);
	КонецЕсли;
	Если НЕ Знач4 = "<n>" Тогда
		Массив.Добавить(Знач4);
	КонецЕсли;
	Если НЕ Знач5 = "<n>" Тогда
		Массив.Добавить(Знач5);
	КонецЕсли;
	Если НЕ Знач6 = "<n>" Тогда
		Массив.Добавить(Знач6);
	КонецЕсли;
	Если НЕ Знач7 = "<n>" Тогда
		Массив.Добавить(Знач7);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьКопиюСтруктурыПоВключаемымКлючам(СтруктураИсточник, Ключи = "");
	
	ИтоговаяСтруктура = Новый Структура;
	
	Если СтруктураИсточник.Количество() = 0 Тогда
		Возврат ИтоговаяСтруктура;
	КонецЕсли;
	
	КоллекцияВключаемыеКлючи = СтрРазделить(Ключи, ",", Ложь);
	Если КоллекцияВключаемыеКлючи.Количество() = 0 Тогда
		Возврат ИтоговаяСтруктура;
	КонецЕсли;
	
	Для Каждого Ключ Из КоллекцияВключаемыеКлючи Цикл
		Ключ = СокрЛП(Ключ);
		ЗначниеКлюча = Неопределено;
		Если НЕ СтруктураИсточник.Свойство(Ключ, ЗначниеКлюча) Тогда
			Продолжить;
		КонецЕсли;
		ИтоговаяСтруктура.Вставить(Ключ, ЗначниеКлюча);
	КонецЦикла;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

Функция ПолучитьКопиюСтруктурыПоИсключаемымКлючам(СтруктураИсточник, Ключи = "");
	
	ИтоговаяСтруктура = Новый Структура;
	
	Если СтруктураИсточник.Количество() = 0 Тогда
		Возврат ИтоговаяСтруктура;
	КонецЕсли;
	
	КоллекцияИсключаемыеКлючи = СтрРазделить(Ключи, ",", Ложь);
	Если НЕ КоллекцияИсключаемыеКлючи.Количество() = 0 Тогда
		Для Инд = 0 По КоллекцияИсключаемыеКлючи.ВГраница() Цикл
			КоллекцияИсключаемыеКлючи[Инд] = СокрЛП(НРег(КоллекцияИсключаемыеКлючи[Инд]));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктурыИсточник Из СтруктураИсточник Цикл
		Ключ = НРег(ЭлементСтруктурыИсточник.Ключ);
		Если НЕ КоллекцияИсключаемыеКлючи.Найти(Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИтоговаяСтруктура.Вставить(ЭлементСтруктурыИсточник.Ключ, ЭлементСтруктурыИсточник.Значение);
	КонецЦикла;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

Процедура ЗаписатьСтруктуруВXML(ЗаписьXML, Ключ, СтруктураКоллекция)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(Ключ);
	Для Каждого ЭлементКоллекции Из СтруктураКоллекция Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Структура") Тогда
			ЗаписатьСтруктуруВXML(ЗаписьXML, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ЭлементКоллекции.Ключ, XMLСтрока(ЭлементКоллекции.Значение));
		КонецЕсли;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ПолучитьXMLНаОснованииСтруктуры(ИмяЭлементов, СтруктураКоллекция)
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ИмяЭлементов = СтрЗаменить(ИмяЭлементов, ".", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИмяЭлементов) Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента(СтрПолучитьСтроку(ИмяЭлементов, НомерСтроки));
	КонецЦикла;
	Для Каждого ЭлементКоллекции Из СтруктураКоллекция Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Структура") Тогда
			ЗаписатьСтруктуруВXML(ЗаписьXML, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ЭлементКоллекции.Ключ, XMLСтрока(ЭлементКоллекции.Значение));
		КонецЕсли;
	КонецЦикла;
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИмяЭлементов) Цикл
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ИнтеграционныеВзаимодействия

Процедура УстановитьСоединениеHTTP(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Установка HTTP соединения. %1");
	РезультатВыполнения.Вставить("HTTPСоединение", Неопределено);
	
	Сервер = Параметры.Сервер;
	Порт = Число(Параметры.Порт);
	ИнтервалОжидания = Число(Параметры.ИнтервалОжидания);
	ЗащищенноеСоединение = Параметры.ЗащищенноеСоединение;
	
	Если НЕ ЗначениеЗаполнено(Сервер)
		ИЛИ Сервер = Неопределено Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения. Не указан адрес сервера");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Порт)
		ИЛИ Порт = Неопределено Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения. Не указан порт сервера");
		Возврат;
	КонецЕсли;
	Если НЕ ТипЗнч(ИнтервалОжидания) = Тип("Число") Тогда
		ИнтервалОжидания = 5;
	КонецЕсли;
	Если НЕ ТипЗнч(ЗащищенноеСоединение) = Тип("ЗащищенноеСоединениеOpenSSL") Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	КонецЕсли;
	
	HTTPСоединение = Неопределено;
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, , , , ИнтервалОжидания, ЗащищенноеСоединение);
	Исключение
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция успешно выполнена");
	РезультатВыполнения.HTTPСоединение = HTTPСоединение;
	
КонецПроцедуры

Процедура ВыполнитьЗапросHTTP(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Выполнение запроса на удаленном сервере. %1");
	РезультатВыполнения.Вставить("HTTPОтветСтрокой", Неопределено);
	РезультатВыполнения.Вставить("HTTPОтветОбъектногоТипа", Неопределено);
	РезультатВыполнения.Вставить("HTTPОтветТекстСостояния", Неопределено);
	РезультатВыполнения.Вставить("HTTPОтветКодСостояния", Неопределено);
	
	МеханизмЗапроса = ?(Параметры.Свойство("МеханизмЗапроса"), Параметры.МеханизмЗапроса, Неопределено);
	ПротоколСервера =
		?(Параметры.Свойство("ПротоколСервера"), Параметры.ПротоколСервера, ПараметрыДрайвера.ПроцессингПротокол);
	HTTPСоединение = ?(Параметры.Свойство("HTTPСоединение"), Параметры.HTTPСоединение, Неопределено);
	Сервер = ?(Параметры.Свойство("Сервер"), Параметры.Сервер, ПараметрыДрайвера.ПроцессингСервер);
	Порт = ?(Параметры.Свойство("Порт"), Параметры.Порт, ПараметрыДрайвера.ПроцессингПорт);
	Прокси = ?(Параметры.Свойство("Прокси"), Параметры.Прокси, Неопределено);
	ЗащищенноеСоединение = ?(Параметры.Свойство("ЗащищенноеСоединение"), Параметры.ЗащищенноеСоединение, Неопределено);
	АутентификацияОС = ?(Параметры.Свойство("АутентификацияОС"), Параметры.АутентификацияОС, Неопределено);
	ИнтервалОжиданияОтвета =
		?(Параметры.Свойство("ИнтервалОжиданияОтвета"), Параметры.ИнтервалОжиданияОтвета, Неопределено);
	Пользователь = ?(Параметры.Свойство("Пользователь"), Параметры.Пользователь, Неопределено);
	Пароль = ?(Параметры.Свойство("Пароль"), Параметры.Пароль, Неопределено);
	АдресРесурса = ?(Параметры.Свойство("АдресРесурса"), Параметры.АдресРесурса, Неопределено);
	Заголовки = ?(Параметры.Свойство("Заголовки"), Параметры.Заголовки, Неопределено);
	ТелоЗапроса = ?(Параметры.Свойство("ТелоЗапроса"), Параметры.ТелоЗапроса, Неопределено);
	ТипКоманды = ?(Параметры.Свойство("ТипКоманды"), Параметры.ТипКоманды, Неопределено);
	
	Если МеханизмЗапроса = Неопределено Тогда
		МеханизмЗапроса = "1С";
	КонецЕсли;
	
	Если СтрСравнить(МеханизмЗапроса, "1С") = 0 Тогда
		// Выполним запрос встроенными механизмами платформы
		Если НЕ ТипЗнч(HTTPСоединение) = Тип("HTTPСоединение") Тогда
			Попытка
				HTTPСоединение = Новый HTTPСоединение(
						Сервер, Порт, Пользователь, Пароль, Прокси, ИнтервалОжиданияОтвета, ЗащищенноеСоединение, АутентификацияОС);
			Исключение
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				HTTPСоединение = Неопределено;
				РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
						СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос;
			HTTPЗапрос.АдресРесурса = Строка(АдресРесурса);
			Если ТипЗнч(Заголовки) = Тип("Соответствие") Тогда
				HTTPЗапрос.Заголовки = Заголовки;
			КонецЕсли;
			Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
				HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
			Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(
					Строка(ТелоЗапроса), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;
			Если СтрСравнить(ТипКоманды, "POST") = 0 Тогда
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			ИначеЕсли СтрСравнить(ТипКоманды, "GET") = 0 Тогда
				HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			ИначеЕсли СтрСравнить(ТипКоманды, "PUT") = 0 Тогда
				HTTPОтвет = HTTPСоединение.Записать(HTTPЗапрос);
			ИначеЕсли СтрСравнить(ТипКоманды, "PATCH") = 0 Тогда
				HTTPОтвет = HTTPСоединение.Изменить(HTTPЗапрос);
			ИначеЕсли СтрСравнить(ТипКоманды, "DELETE") = 0 Тогда
				HTTPОтвет = HTTPСоединение.Удалить(HTTPЗапрос);
			КонецЕсли;
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			Возврат;
		КонецПопытки;
		HTTPОтветТелоКакСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", HTTPОтветТелоКакСтрока);
		Попытка
			JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
			РезультатВыполнения.HTTPОтветОбъектногоТипа = РезультатПВК.КоллекцияДанных;
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		РезультатВыполнения.HTTPОтветСтрокой = HTTPОтветТелоКакСтрока;
		РезультатВыполнения.HTTPОтветТекстСостояния = Неопределено;
		РезультатВыполнения.HTTPОтветКодСостояния = HTTPОтвет.КодСостояния;
		
	ИначеЕсли СтрСравнить(МеханизмЗапроса, "WinHttp") = 0 Тогда
		// Выполним запрос c помощью библиотеки ОС "WinHttp"
		ПротоколСервера = СтрШаблон("%1://", Нрег(СокрЛП(ПротоколСервера)));
		Сервер = Нрег(СокрЛП(Сервер));
		Если Порт = 0
			ИЛИ Порт = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(Порт) Тогда
			Порт = "";
		Иначе
			Порт = СтрШаблон(":%1", СокрЛП(Строка(Порт)));
		КонецЕсли;
		АдресРесурса = СтрШаблон("/%1", Нрег(СокрЛП(АдресРесурса)));
		СтрокаПодключения = СтрШаблон("%1%2%3%4", ПротоколСервера, Сервер, Порт, АдресРесурса);
		
		Если НЕ ТипЗнч(HTTPСоединение) = Тип("COMОбъект") Тогда
			Попытка
				HTTPСоединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1"); // BSLLS:UsingObjectNotAvailableUnix-off
			Исключение
				HTTPСоединение = Неопределено;
				РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
						СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
				ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
		КонецЕсли;
		HTTPСоединение.SetTimeouts(
			ИнтервалОжиданияОтвета, ИнтервалОжиданияОтвета, ИнтервалОжиданияОтвета, ИнтервалОжиданияОтвета);
		Попытка
			HTTPСоединение.Open(ТипКоманды, СтрокаПодключения, 0);
		Исключение
			HTTPСоединение = Неопределено;
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
		
		Если ТипЗнч(Заголовки) = Тип("Структура")
			ИЛИ ТипЗнч(Заголовки) = Тип("Соответствие") Тогда
			Для Каждого Заголовок Из Заголовки Цикл
				HTTPСоединение.SetRequestHeader(Заголовок.Ключ, Заголовок.Значение);
			КонецЦикла;
		КонецЕсли;
		Попытка
			HTTPСоединение.Send(Строка(ТелоЗапроса));
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			Возврат;
		КонецПопытки;
		
		РезультатПВК = Новый Структура;
		ПараметрыПВК = Новый Структура("JsonТекст", HTTPСоединение.ResponseText);
		Попытка
			JSONПреобразоватьВКоллекцию(РезультатПВК, ПараметрыПВК);
			РезультатВыполнения.HTTPОтветОбъектногоТипа = РезультатПВК.КоллекцияДанных;
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		РезультатВыполнения.HTTPОтветСтрокой = HTTPСоединение.ResponseText;
		РезультатВыполнения.HTTPОтветТекстСостояния = HTTPСоединение.StatusText;
		РезультатВыполнения.HTTPОтветКодСостояния = HTTPСоединение.Status;
	Иначе
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Отсутствует сценарий выполнения по механизму %1", МеханизмЗапроса));
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.HTTPОтветКодСостояния < 200
		И РезультатВыполнения.HTTPОтветКодСостояния >= 300 Тогда
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: Код состояния сервера %1", Строка(РезультатВыполнения.HTTPОтветКодСостояния)));
		Возврат;
	КонецЕсли;
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательное

// получаем Электроно-Цифровую Подпись
// Из сформированного блока необходимо вычислить hash по функции sha256, и зашифровать его приватным ключом.
// Далее полученные байты необходимо кодировать в base64
Процедура ШифроватьБлокДанных(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Шифрование данных. %1");
	РезультатВыполнения.Вставить("ДанныеХэш64", Неопределено);
	
	ДанныеШифрования = Параметры.ДанныеШифрования;
	OpenSSL = Параметры.OpenSSL;
	ФайлКлючШифрования = Параметры.КлючШифрования;
	
	Попытка
		// Запишем данные для шифрования во временный файл
		ФайлДанныеШифрования = ПолучитьИмяВременногоФайла("data");
		ТекстовыйДокументДанныеШифрования = Новый ТекстовыйДокумент;
		ТекстовыйДокументДанныеШифрования.УстановитьТекст(СокрЛП(ДанныеШифрования));
		ТекстовыйДокументДанныеШифрования.Записать(ФайлДанныеШифрования, "CESU-8"); // Аналог кодировки UTF-8 без BOM;
		
		// Подготовим имена временных файлов для записи результатов шифрования
		ФайлЗашифрованныйХэш = ПолучитьИмяВременногоФайла("hash");
		ФайлЗашифрованныйХэш64 = ПолучитьИмяВременногоФайла("hash64");
		
		// Подготовим файл последоваельности команд интерпритатора для интерпритатора
		ПоследоваельностьКомандИнтерпритатора = ПолучитьИмяВременногоФайла("bat");
		ТекстовыйДокументПоследоваельностьКомандИнтерпритатора = Новый ТекстовыйДокумент;
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;
	
	// Формируем коллекцию строк команд системы для выполнения шифрования данных
	КомандыИнтерпретатора = Новый Массив;
	КомандыИнтерпретатора.Добавить(СтрШаблон("""%1"" dgst -sha256 -sign ""%2"" -out ""%3"" ""%4""",
			OpenSSL, ФайлКлючШифрования, ФайлЗашифрованныйХэш, ФайлДанныеШифрования));
	КомандыИнтерпретатора.Добавить(СтрШаблон("""%1"" base64 -e -in ""%2"" -out ""%3""",
			OpenSSL, ФайлЗашифрованныйХэш, ФайлЗашифрованныйХэш64));
	// Выполним шифрование
	Для Каждого КомандаИнтерпритатора Из КомандыИнтерпретатора Цикл
		ТекстовыйДокументПоследоваельностьКомандИнтерпритатора.ДобавитьСтроку(КомандаИнтерпритатора);
	КонецЦикла;
	Попытка
		ТекстовыйДокументПоследоваельностьКомандИнтерпритатора.Записать(
			ПоследоваельностьКомандИнтерпритатора, КодировкаТекста.OEM);
		WBScript = Новый COMОбъект("WScript.Shell");
		WBScript.Run(ПоследоваельностьКомандИнтерпритатора, 0, Истина);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Попытка
			ЗапуститьПриложение(ПоследоваельностьКомандИнтерпритатора, , Истина);
		Исключение
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			УдалитьФайлы(ПоследоваельностьКомандИнтерпритатора);
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	СоответствиеШифрованныеФайлы = Новый Соответствие;
	СоответствиеШифрованныеФайлы.Вставить(ФайлЗашифрованныйХэш, "");
	СоответствиеШифрованныеФайлы.Вставить(ФайлЗашифрованныйХэш64, "");
	Для Каждого Хэш Из СоответствиеШифрованныеФайлы Цикл
		ФайлХэш = Новый Файл(Хэш.Ключ);
		Если НЕ ФайлХэш.Существует() Тогда
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: Отсутствует шифрованный файл %1", Хэш.Ключ));
			Возврат;
		КонецЕсли;
		ТекстовыйД = Новый ТекстовыйДокумент;
		ТекстовыйД.Прочитать(Хэш.Ключ, "CESU-8");
		СоответствиеШифрованныеФайлы[Хэш.Ключ] = ТекстовыйД.ПолучитьТекст();
		Если ПустаяСтрока(СоответствиеШифрованныеФайлы[Хэш.Ключ]) Тогда
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: Отсутствуют шифрованные данные %1", Хэш.Ключ));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВременныйФайл Из СоздатьМассив(ФайлКлючШифрования, ФайлДанныеШифрования, ФайлЗашифрованныйХэш,
			ФайлЗашифрованныйХэш64, ПоследоваельностьКомандИнтерпритатора) Цикл
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	РезультатВыполнения.ДанныеХэш64 = СоответствиеШифрованныеФайлы.Получить(ФайлЗашифрованныйХэш64);
	
КонецПроцедуры

Процедура Пауза(ВремяОжидания)
	
	Попытка
		СоединениеПауза = Новый HTTPСоединение("127.0.0.0", , , , , ВремяОжидания);
		СоединениеПауза.Получить(Новый HTTPЗапрос());
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ВыполнитьВыводНаДисплей(Параметры = Неопределено)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Вывод информации на qr-дисплей. %1");
	
	ДисплейПорт = ?(Параметры.Свойство("ДисплейПорт"), Параметры.ДисплейПорт, Неопределено);
	Данные = ?(Параметры.Свойство("Данные"), Параметры.Данные, Неопределено);
	ТипДанных = ?(Параметры.Свойство("ТипДанных"), Параметры.ТипДанных, Неопределено);
	ТаймаутДисплея = ?(Параметры.Свойство("ТаймаутДисплея"), Параметры.ТаймаутДисплея, Неопределено);
	
	Если НЕ Данные = Неопределено
		И НЕ ТипДанных = Неопределено Тогда
		СтрокаТипДанных = Неопределено;
		Если Врег(СокрЛП(ТипДанных)) = "QR" Тогда
			СтрокаТипДанных = "qr";
		ИначеЕсли Врег(СокрЛП(ТипДанных)) = "ИЗОБРАЖЕНИЕ" Тогда
			СтрокаТипДанных = "img";
		Иначе
			РезультатВыполнения.Комментарий =
				СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения. Неизвестный тип данных.");
			Возврат РезультатВыполнения;
		КонецЕсли;
		Попытка
			Текст = Новый ЗаписьТекста(СтрШаблон("com%1", ДисплейПорт), КодировкаТекста.ANSI);
			Текст.ЗаписатьСтроку(СтрШаблон("%1=%2", СтрокаТипДанных, Строка(Данные)));
			Текст.ЗаписатьСтроку("");
			Текст.Закрыть();
		Исключение
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЛогаПриОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ТаймаутДисплея) = Тип("Число") Тогда
		Пауза(ТаймаутДисплея);
		Попытка
			Текст = Новый ЗаписьТекста(СтрШаблон("com%1", ДисплейПорт), КодировкаТекста.ANSI);
			Текст.ЗаписатьСтроку("light=off");
			Текст.ЗаписатьСтроку("");
			Текст.Закрыть();
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
					СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			Возврат РезультатВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ПолучитьВременныйФайлИзМакета(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Получение файла из макета. %1");
	РезультатВыполнения.Вставить("ИмяВременногоФайла", Неопределено);
	
	ИмяМакета = Параметры.ИмяМакета;
	
	ИмяВременногоФайла = Неопределено;
	Попытка
		РасширениеФайла = СтрРазделить(ИмяМакета, "_", Истина).Получить(0);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла); // BSLLS:MissingTemporaryFileDeletion-off
		ВременноеХранилище = ПоместитьВоВременноеХранилище(ЭтотОбъект.ПолучитьМакет(ИмяМакета));
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВременноеХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				СтрШаблон("Ошибка выполнения: %1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий, "Операция выполнена");
	РезультатВыполнения.ИмяВременногоФайла = ИмяВременногоФайла;
	
КонецПроцедуры

Функция ПолучитьУникальныйИдентификаторОперации()
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	Возврат Лев(СтрШаблон("%1%2%3",
			Лев(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""), 16),
			Формат(ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 4294967295), "ЧГ=0"),
			Прав(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""), 16)), 32);
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция КонструкторПараметровВыводНаДисплей(
		ДисплейПорт = Неопределено, ТипДанных = Неопределено, Данные = Неопределено, ТаймаутДисплея = Неопределено)
	
	ПараметрыВыводНаДисплей = Новый Структура();
	ПараметрыВыводНаДисплей.Вставить("ДисплейПорт", ДисплейПорт);
	ПараметрыВыводНаДисплей.Вставить("ТипДанных", ТипДанных);
	ПараметрыВыводНаДисплей.Вставить("Данные", Данные);
	ПараметрыВыводНаДисплей.Вставить("ТаймаутДисплея", ТаймаутДисплея);
	
	Возврат ПараметрыВыводНаДисплей;
	
КонецФункции

Функция КонструкторПараметровПечатиНаККМ(ККМ = Неопределено, Заголовок = "", ДанныеКода = "")
	
	ПараметрыПечатиНаККМ = Новый Структура();
	ПараметрыПечатиНаККМ.Вставить("ККМ", ККМ);
	ПараметрыПечатиНаККМ.Вставить("Заголовок", Заголовок);
	ПараметрыПечатиНаККМ.Вставить("ДанныеКода", ДанныеКода);
	
	Возврат ПараметрыПечатиНаККМ;
	
КонецФункции

Функция КонструкторОписаниеВерсийПрограммы(
		Версия = "0.0.0", ДатаВерсии = '00010101', АвторВерсии = "КЮБ", ОписаниеВерсии = "");
	
	ОписаниеВерсийПрограммы = Новый Структура;
	ОписаниеВерсийПрограммы.Вставить("Версия", Версия);
	ОписаниеВерсийПрограммы.Вставить("ДатаВерсии", Формат(ДатаВерсии, "ДФ=dd.MM.yyyy"));
	ОписаниеВерсийПрограммы.Вставить("АвторВерсии", АвторВерсии);
	ОписаниеВерсийПрограммы.Вставить("ОписаниеВерсии", ОписаниеВерсии);
	
	Возврат ОписаниеВерсийПрограммы;
	
КонецФункции

#КонецОбласти

#Область Логирование

Процедура КонтрольАрхиваЛогирования(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Контроль архива логирования. %1");
	РезультатВыполнения.Вставить("ОшибкиПриУдаление", Неопределено);
	
	// Проверим, что логирование включено в настройках и прописан каталог сохранения логов
	КоличествоЛоговХранения = Неопределено;
	КаталогЛогирования = "";
	Попытка
		КоличествоЛоговХранения = ПараметрыДрайвера.КоличествоЛоговХранения;
		КаталогЛогирования = ПараметрыДрайвера.КаталогЛогирования;
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если НЕ ТипЗнч(КоличествоЛоговХранения) = Тип("Число")
		ИЛИ КоличествоЛоговХранения < 1
		ИЛИ ПустаяСтрока(КаталогЛогирования) Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: отсутствуют данные для контроля");
		Возврат;
	КонецЕсли;
	
	ФайлыЛоговКоллекция = Новый Массив;
	// Определим расположение файлов логов
	КаталогЛогирования = НормализоватьКаталог(КаталогЛогирования, Ложь);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФайлыЛоговКоллекция,
		НайтиФайлы(КаталогЛогирования, СтрШаблон("*.%1", РасширенияВнешнихФайловЛогирования.Общий), Ложь),
		Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФайлыЛоговКоллекция,
		НайтиФайлы(КаталогЛогирования, СтрШаблон("*.%1", РасширенияВнешнихФайловЛогирования.РезультатОплаты), Ложь),
		Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФайлыЛоговКоллекция,
		НайтиФайлы(КаталогЛогирования, "*.kyb", Ложь),
		Истина);
		
	// Проанализируем количество хранящихся файлов логирования
	Если ФайлыЛоговКоллекция.Количество() = 0
		ИЛИ ФайлыЛоговКоллекция.Количество() <= КоличествоЛоговХранения Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				"Файлы логов отсутствуют или их количество не превышает допустимый максимум");
		Возврат;
	КонецЕсли;
	
	ТаблицаФайлы = Новый ТаблицаЗначений;
	ТаблицаФайлы.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаФайлы.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	Для Каждого ФайлЛога Из ФайлыЛоговКоллекция Цикл
		Попытка
			УниверсальноеВремяИзменения = ФайлЛога.ПолучитьУниверсальноеВремяИзменения();
			ИмяФайла = ФайлЛога.ПолноеИмя;
		Исключение
			Продолжить;
		КонецПопытки;
		НовСтрока = ТаблицаФайлы.Добавить();
		НовСтрока.Дата = УниверсальноеВремяИзменения;
		НовСтрока.ИмяФайла = ИмяФайла;
	КонецЦикла;
	Если ТаблицаФайлы.Количество() = 0
		ИЛИ ТаблицаФайлы.Количество() <= КоличествоЛоговХранения Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Комментарий = СтрШаблон(РезультатВыполнения.Комментарий,
				"Найденные Файлы логов отсутствуют или их количество не превышает допустимый максимум");
		Возврат;
	КонецЕсли;
	ТаблицаФайлы.Сортировать("Дата Возр");
	
	ОшибкиУдаления = Новый Массив;
	УдалитьВсегоФайлов = ТаблицаФайлы.Количество() - КоличествоЛоговХранения;
	Для НомерСтроки = 1 По УдалитьВсегоФайлов Цикл
		Попытка
			ИмяФайла = ТаблицаФайлы.Получить(НомерСтроки - 1).ИмяФайла;
			УдалитьФайлы(ИмяФайла);
		Исключение
			ОшибкиУдаления.Количество(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	Если НЕ ОшибкиУдаления.Количество() = 0 Тогда
		РезультатВыполнения.Комментарий =
			СтрШаблон(РезультатВыполнения.Комментарий, "Ошибка выполнения: возникли ошибки при попытке удаления файлов");
		РезультатВыполнения.ОшибкиПриУдаление = ОшибкиУдаления;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий =
		СтрШаблон(РезультатВыполнения.Комментарий, "Контроль выполнен. Устаревшие файлы удалены");
	
КонецПроцедуры

Процедура УстановитьОшибку(КодОперации, РезультатВыполнения, ОписаниеОшибки = "")
	
	КодОперации = Число(КодОперации);
	
	СоответствияОпераций = Новый Соответствие;
	СоответствияОпераций.Вставить(1, "Получение ревизии интерфейса");
	СоответствияОпераций.Вставить(2, "Получение описания драйвера");
	СоответствияОпераций.Вставить(3, "Получение параметров драйвера");
	СоответствияОпераций.Вставить(4, "Установка параметра драйвера");
	СоответствияОпераций.Вставить(5, "Подключение к серверу банка");
	СоответствияОпераций.Вставить(6, "Отключение");
	СоответствияОпераций.Вставить(7, "Тестирование подключения и оборудования");
	СоответствияОпераций.Вставить(8, "Получение дополнительных действий");
	СоответствияОпераций.Вставить(9, "Выполнение дополнительного действия");
	СоответствияОпераций.Вставить(13, "Преавторизация по платежной карте");
	СоответствияОпераций.Вставить(14, "Завершение преавторизации по платежной карте");
	СоответствияОпераций.Вставить(15, "Отмена преавторизации по платежной карте");
	СоответствияОпераций.Вставить(16, "Аварийная отмена последней транзакции");
	СоответствияОпераций.Вставить(17, "Формирование итогов дня");
	СоответствияОпераций.Вставить(18, "Печать квитанции на терминале");
	СоответствияОпераций.Вставить(19, "Оплата по СБП");
	СоответствияОпераций.Вставить(20, "Возврат по СБП");
	СоответствияОпераций.Вставить(21, "Создание кассовой платежной ссылки СБП");
	СоответствияОпераций.Вставить(22, "Отмена оплаты");
	СоответствияОпераций.Вставить(23, "Генерация идентификаторов для кассовых платежных ссылок СБП");
	
	Операция = СоответствияОпераций.Получить(КодОперации);
	Если Операция = Неопределено Тогда
		Операция = "Неизвестная операция";
	КонецЕсли;
	
	Если РезультатВыполнения Тогда
		ОшибкаОписание = СтрШаблон("%1. Операция успешно выполнена", Операция);
		ОшибкаКод = КодОперации;
	Иначе
		ОшибкаОписание = СтрШаблон("%1. Ошибка при выполнение операции. %2", Операция, ОписаниеОшибки);
		ОшибкаКод = КодОперации * -1;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеКодаОтвета(КодОтвета, ОписаниеКода = "")
	
	СоответствиеОписаниеКодовОтвета = Новый Соответствие;
	СоответствиеОписаниеКодовОтвета.Вставить("0", "ОК");
	СоответствиеОписаниеКодовОтвета.Вставить("1", "Обработка операции B2C - в процессе, на стороне СБП, 
		| необходимо вызвать метод getRefundStatus для получения текущего статуса операции возврата B2C
		| или метод getB2cStatus для получения текущего статуса операции перевода B2C");
	СоответствиеОписаниеКодовОтвета.Вставить("2",
		"Решение об оплате с привязанного счета еще не получено от Банка Плательщика");
	СоответствиеОписаниеКодовОтвета.Вставить("3",
		"Получено согласие на проведение платежа от Банка Плательщика, ожидание Распоряжения");
	СоответствиеОписаниеКодовОтвета.Вставить("-1", "Некорректные параметры запроса");
	СоответствиеОписаниеКодовОтвета.Вставить("-2", "Внутренняя ошибка системы");
	СоответствиеОписаниеКодовОтвета.Вставить("-3", "При формировании QR кода возникла ошибка, сформируйте новый запрос");
	СоответствиеОписаниеКодовОтвета.Вставить("-4", "QR код еще не сформирован, выполните запрос позже");
	СоответствиеОписаниеКодовОтвета.Вставить("-5", "Нарушена уникальность sourceId, сформируйте новый запрос");
	СоответствиеОписаниеКодовОтвета.Вставить("-6",
		"При запросе статуса оплаты по QR коду возникла ошибка, сформируйте новый запрос");
	СоответствиеОписаниеКодовОтвета.Вставить("-7", "Истек срок действия QR кода, необходимо сформировать новый QR код");
	СоответствиеОписаниеКодовОтвета.Вставить("-8",
		"По данному QR коду инициирована операция оплаты, сформируйте новый QR код для операции");
	СоответствиеОписаниеКодовОтвета.Вставить("-9",
		"На расчетном счете присутствуют ограничения, совершение операций невозможно, обратитесь в Банк");
	СоответствиеОписаниеКодовОтвета.Вставить("-10", "Юридическое лицо или расчетный счет не зарегистрированы в СБП");
	СоответствиеОписаниеКодовОтвета.Вставить("-11", "ТСП не зарегистрировано в СБП");
	СоответствиеОписаниеКодовОтвета.Вставить("-12", "Для статического QR кода, необходимо передавать параметр fpsRequestId.
		| fpsRequestId - идентификатор платежной операции в СБП, уточните его в мобильном приложении клиента");
	СоответствиеОписаниеКодовОтвета.Вставить("-13", "Отсутствуют данные по оплате по данному QR коду");
	СоответствиеОписаниеКодовОтвета.Вставить("-14", "Оплата по данному QR коду отлична от успешного, конечного статуса");
	СоответствиеОписаниеКодовОтвета.Вставить("-15", "Сумма возврата превышает сумму оплаты по данному QR коду");
	СоответствиеОписаниеКодовОтвета.Вставить("-16",
		"Технологические работы в Банке получателя. Попробуйте повторить перевод через некоторое время");
	СоответствиеОписаниеКодовОтвета.Вставить("-17", "Невозможно совершить операцию");
	СоответствиеОписаниеКодовОтвета.Вставить("-18",
		"Уточните у клиента возможность возврата через СБП в Банке получателя");
	СоответствиеОписаниеКодовОтвета.Вставить("-19",
		"Технологические работы в Банке получателя. Попробуйте повторить перевод через некоторое время");
	СоответствиеОписаниеКодовОтвета.Вставить("-21", "Не удалось получить статус возврата в СБП");
	СоответствиеОписаниеКодовОтвета.Вставить("-22", "Операция завершилась по time-out ответа D04");
	СоответствиеОписаниеКодовОтвета.Вставить("-23", "Операция завершилась отказом в СБП");
	СоответствиеОписаниеКодовОтвета.Вставить("-24", "Статус операции не определен, выполните запрос позже");
	СоответствиеОписаниеКодовОтвета.Вставить("-25",
		"Не удалось найти данные по операции. Проверьте корректность передаваемых параметров");
	СоответствиеОписаниеКодовОтвета.Вставить("-26", "ЭЦП не прошла валидацию");
	СоответствиеОписаниеКодовОтвета.Вставить("-27", "Банк получателя не является участником СБП");
	СоответствиеОписаниеКодовОтвета.Вставить("-28", "Отказано. Неверно указано ФИО получателя");
	СоответствиеОписаниеКодовОтвета.Вставить("-29", "ЭЦП не прошла валидацию. Отсутствует открытый ключ для проверки ЭЦП");
	СоответствиеОписаниеКодовОтвета.Вставить("-30", "Клиент не найден");
	СоответствиеОписаниеКодовОтвета.Вставить("-31", "Выполните возврат любым другим способом");
	СоответствиеОписаниеКодовОтвета.Вставить("-32", "Ограничения законодательства");
	СоответствиеОписаниеКодовОтвета.Вставить("-33",
		"Ограничения законодательства - уровень идентификации денежных средств недостаточен");
	СоответствиеОписаниеКодовОтвета.Вставить("-34",
		"На стороне Банка получателя не реализован функционал СБП B2C - Получатель");
	СоответствиеОписаниеКодовОтвета.Вставить("-35", "Услуга проверки реквизитов получателя недоступна");
	СоответствиеОписаниеКодовОтвета.Вставить("-36",
		"Допустимое значение qrcExpire (срок жизни QR кода) от 1 до 129600 минут");
	СоответствиеОписаниеКодовОтвета.Вставить("-38", "Неверный формат назначения платежа");
	СоответствиеОписаниеКодовОтвета.Вставить("-39", "Плательщик отказался от оформления подписки");
	СоответствиеОписаниеКодовОтвета.Вставить("-40", "Подписка не найдена");
	СоответствиеОписаниеКодовОтвета.Вставить("-42", "Кассовая ссылка для данной кассы уже создана");
	СоответствиеОписаниеКодовОтвета.Вставить("-43", "Деактивация невозможна. Кассовая ссылка не активирована.");
	СоответствиеОписаниеКодовОтвета.Вставить("-44",
		"Активация невозможна. Кассовая ссылка с переданными параметрами не зарегистрирована");
	СоответствиеОписаниеКодовОтвета.Вставить("-45", "Деактивация не выполнена. Проверьте параметры, повторите запрос");
	СоответствиеОписаниеКодовОтвета.Вставить("-46", "Кассовая ссылка еще не создана. Выполните запрос позже");
	СоответствиеОписаниеКодовОтвета.Вставить("-47",
		"Изменение счёта невозможно. Не найдена зарегистрированная Кассовая ссылка");
	СоответствиеОписаниеКодовОтвета.Вставить("-48", "Изменение счёта не выполнено. Операция в СБП завершилась неудачно");
	СоответствиеОписаниеКодовОтвета.Вставить("-49",
		"Изменение счёта не выполнено. Значение текущего счета совпадает с значением нового счета");
	СоответствиеОписаниеКодовОтвета.Вставить("-52", "Допустимое значение cashQrcExpire от 1 до 20 минут");
	СоответствиеОписаниеКодовОтвета.Вставить("-53", "Неверный формат redirectUrl");
	СоответствиеОписаниеКодовОтвета.Вставить("-54",
		"По переданному параметру activationSourceId не найдена операция активации");
	СоответствиеОписаниеКодовОтвета.Вставить("-55",
		"Ошибка контроля остатка д/с. Повторите операцию позднее или обратитесь в Банк");
	СоответствиеОписаниеКодовОтвета.Вставить("-58", "Значение qrcId не найдено");
	СоответствиеОписаниеКодовОтвета.Вставить("-63", "Деактивация невозможна. Необходимо запросить статус оплаты.");
	СоответствиеОписаниеКодовОтвета.Вставить("-64", "Деактивация невозможна. Нет информации по активации.");
	СоответствиеОписаниеКодовОтвета.Вставить("-65", "Истекло время ожидания уведомления от Банка Плательщика");
	СоответствиеОписаниеКодовОтвета.Вставить("-67",
		"Распоряжение на выполнение Операции СБП не получено от Банка Плательщика. Таймаут истек");
	
	ОписаниеКодаОтвета = СоответствиеОписаниеКодовОтвета.Получить(КодОтвета);
	Если ОписаниеКодаОтвета = Неопределено Тогда
		Если НЕ ПустаяСтрока(ОписаниеКода) Тогда
			ОписаниеКодаОтвета = ОписаниеКода;
		Иначе
			ОписаниеКодаОтвета = "Неизвестный код ответа. Описание отсутствует";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеКодаОтвета;
	
КонецФункции

Функция ПолучитьОписаниеКодаСтатуса(КодСтатуса)
	
	СоответствиеОписаниеКодовСтатуса = Новый Соответствие;
	// Статусы опреации по проверке статуса оплаты динамическим QR
	СоответствиеОписаниеКодовСтатуса.Вставить("NOT_STARTED",
		"Операция по QR-коду не инициализирована со стороны плательщика. Необходимо продолжить запрос статуса");
	СоответствиеОписаниеКодовСтатуса.Вставить("RECEIVED_OPKC",
		"Операция обрабатывается в СБП. Необходимо продолжить запрос статуса");
	СоответствиеОписаниеКодовСтатуса.Вставить("IN_PROGRESS_OPKC",
		"Операция одобрена. Обработана на уровне ЦБ, но не обработана на уровне СБП или Банка-получателя, 
		| срок обработки до 72 часов. После обработки на стороне Банка-получателя, код статуса изменится на ACCEPTED");
	СоответствиеОписаниеКодовСтатуса.Вставить("ACCEPTED", "Операция одобрена");
	СоответствиеОписаниеКодовСтатуса.Вставить("DECLINED", "Операция отклонена");
	СоответствиеОписаниеКодовСтатуса.Вставить("EXPIRED",
		"Истек срок действия QR кода, необходимо сформировать новый QR код");
	
	ОписаниеКодаСтатуса = СоответствиеОписаниеКодовСтатуса.Получить(КодСтатуса);
	Если ОписаниеКодаСтатуса = Неопределено Тогда
		ОписаниеКодаСтатуса = "Неизвестный код статуса. Описание отсутствует";
	КонецЕсли;
	
	Возврат ОписаниеКодаСтатуса;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаЛогаРезультатаОплаты()
	
	Возврат НормализоватьКаталог(
		СтрШаблон("%1\%2_%3_%4.%5",
			ПараметрыДрайвера.КаталогЛогирования,
			Формат(ТекущаяДатаСеанса(), "ДФ=ddMMyyHHmmss"),
			СтрЗаменить(СокрЛП(ПараметрыДрайвера.РабочееМесто.Наименование), ".", "_"),
			Строка(ИдентификаторСессии),
			РасширенияВнешнихФайловЛогирования.РезультатОплаты),
		Истина);
		
КонецФункции

Процедура ВыполнитьЗаписьРезультатаОплатыВоВременныйФайл(РезультатОплаты)
	
	Если ПустаяСтрока(АдресФайлаРезультатаОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	JSONПреобразоватьИзКоллекции(
		РезультатВыполнения, Новый Структура("КоллекцияПреобразования", РезультатОплаты));
	Если НЕ РезультатВыполнения.Результат тогда
		Возврат;
	КонецЕсли;
	
	РезультатОплатыДокумент = Новый ТекстовыйДокумент;
	РезультатОплатыДокумент.ДобавитьСтроку(РезультатВыполнения.JsonТекст);
	РезультатОплатыДокумент.Записать(АдресФайлаРезультатаОплаты);
	
КонецПроцедуры

#КонецОбласти

#Область СведенияОПрограмме

Функция ПолучитьВерсиюПрограммы()
	
	ВерсияПрограммы = "";
	АктуальныеСведенияОПрограмме = ПолучитьАктуальныеСведенияОПрограмме();
	
	Попытка
		Версия = Строка(АктуальныеСведенияОПрограмме.Версия);
		ДатаВерсии = Строка(АктуальныеСведенияОПрограмме.ДатаВерсии);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат ВерсияПрограммы;
	КонецПопытки;
	
	ВерсияПрограммы = СтрШаблон("%1 от %2", Версия, ДатаВерсии);
	
	Возврат ВерсияПрограммы;
	
КонецФункции

Функция ПолучитьАктуальныеСведенияОПрограмме()
	
	АктуальныеСведенияОПрограмме =
		Новый Структура("Наименование, ДатаСоздания, Автор, Описание, Версия, ДатаВерсии, АвторВерсии, ОписаниеВерсии");
	
	СведенияОПрограмме = СведенияОПрограмме();
	
	ЗаполнитьЗначенияСвойств(АктуальныеСведенияОПрограмме, СведенияОПрограмме,
		"Наименование, ДатаСоздания, Автор, Описание");
	ЗаполнитьЗначенияСвойств(АктуальныеСведенияОПрограмме,
		СведенияОПрограмме.ОписаниеВерсий[СведенияОПрограмме.ОписаниеВерсий.ВГраница()],
		"Версия, ДатаВерсии, АвторВерсии, ОписаниеВерсии");
	
	Возврат АктуальныеСведенияОПрограмме;
	
КонецФункции

Функция СведенияОПрограмме()
	
	ОписаниеОбработки = Новый Структура;
	ОписаниеОбработки.Вставить("Наименование", "Драйвер-компонента 'СБП Банк Русский Стандарт'");
	ОписаниеОбработки.Вставить("ДатаСоздания", Формат('20220329', "ДФ=dd.MM.yyyy"));
	ОписаниеОбработки.Вставить("Автор", "КЮБ");
	ОписаниеОбработки.Вставить("Описание",
		"Драйвер реализующий механику работы с Системой Быстрых платежей через реализацию банка Русский Стандарт");
	ОписаниеОбработки.Вставить("ОписаниеВерсий", Новый Массив);
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.1.1", '20220329', "КЮБ",
			"Реализована механика работы с Системой Быстрых платежей через реализацию банка Русский Стандарт"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.2.1", '20220408', "КЮБ"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.2.2", '20220418', "КЮБ",
			"Доработка от 18.04.2022"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.2.3", '20220420', "КЮБ",
			"Доработка от 20.04.2022. Добавлена возможность печати QR на ККМ"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.2.4", '20220621', "КЮБ",
			"Доработка от 21.06.2022. Доработана возможность не выводить графический код на устройство"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.2.5", '20220622', "КЮБ",
			"Доработка от 22.06.2022. Доработка функционала, устранение ошибок программы"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.3.1", '20220623', "КЮБ",
			"Доработка от 23.06.2022. Реализованы сценарии логирования выполняемых операций.
			| Общая доработка функционала, устранение ошибок программы"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.3.2", '20220712', "КЮБ",
			"Доработка от 12.07.2022. Общая доработка функционала, устранение ошибок программы"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.3.3", '20220916', "КЮБ",
			"Доработка от 16.09.2022. Общая доработка функционала, устранение ошибок программы"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.1", '20230518', "КЮБ",
			"Доработка от 18.05.2023. Реализация возможности использовать фоновые операции при ожидание оплаты"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.2", '20230531', "КЮБ",
			"Доработка от 31.05.2023. Общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.3", '20230707', "КЮБ",
			"Доработка от 07.07.2023. Общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.4", '20230713', "КЮБ",
			"Доработка от 13.07.2023. Общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.5", '20230714', "КЮБ",
			"Доработка от 14.07.2023. Общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.6", '20230719', "КЮБ",
			"Доработка от 19.07.2023. Общая доработка функционала, доработка выполнения в фоне"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.7", '20230720', "КЮБ",
			"Доработка от 20.07.2023. Общая доработка функционала, доработка выполнения в фоне"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.8", '20230804', "КЮБ",
			"Доработка от 04.08.2023. Доработка возврата по КПС, рефакторинг кода, общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.4.9", '20230808', "КЮБ",
			"Доработка от 08.08.2023. Доработка возврата по КПС, рефакторинг кода, общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.1", '20230809', "КЮБ",
			"Доработка от 09.08.2023. Рализация перегруженного метода вендора для возврата по КПС,
			| доработка сценария логирования, рефакторинг кода, общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.2", '20230810', "КЮБ",
			"Доработка от 10.08.2023. Доработка логирования, общая доработка функционала"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.3", '20230814', "КЮБ",
			"Доработка от 14.08.2023. Исправление ошибки с формированием комментария."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.4", '20230815', "КЮБ",
			"Доработка от 15.08.2023. Общие доработки."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.5", '20230820', "КЮБ",
			"Доработка от 20.08.2023. Общие доработки. Фикс ошибок."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.6", '20230821', "КЮБ", "Доработка от 21.08.2023. Общие доработки."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.7", '20230824', "КЮБ", "Доработка от 24.08.2023. Общие доработки."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.9", '20230828',
			"КЮБ", "Доработка от 28.08.2023. Доработки логирования системы. Общие доработки."));
		
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.10", '20230829', "КЮБ", "Доработка от 29.08.2023."));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(
		КонструкторОписаниеВерсийПрограммы("1.5.11", '20230831', "КЮБ", "Доработка от 31.08.2023. Фиксация ошибки."));
	
	Возврат ОписаниеОбработки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

РасширенияВнешнихФайловЛогирования = Новый Структура(
		"Общий, РезультатОплаты", "rsblog", "rsbsalelog");

#КонецОбласти